/* automatically generated by rust-bindgen 0.63.0 */

pub const LJM_VERSION: f64 = 1.2001;
pub const LJM_READ: ::std::os::raw::c_int = 0;
pub const LJM_WRITE: ::std::os::raw::c_int = 1;
pub const LJM_UINT16: ::std::os::raw::c_int = 0;
pub const LJM_UINT32: ::std::os::raw::c_int = 1;
pub const LJM_INT32: ::std::os::raw::c_int = 2;
pub const LJM_FLOAT32: ::std::os::raw::c_int = 3;
pub const LJM_BYTE: ::std::os::raw::c_int = 99;
pub const LJM_STRING: ::std::os::raw::c_int = 98;
pub const LJM_STRING_MAX_SIZE: ::std::os::raw::c_uint = 49;
pub const LJM_STRING_ALLOCATION_SIZE: _bindgen_ty_1 = 50;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const LJM_INVALID_NAME_ADDRESS: ::std::os::raw::c_int = -1;
pub const LJM_MAX_NAME_SIZE: _bindgen_ty_2 = 256;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const LJM_MAC_STRING_SIZE: _bindgen_ty_3 = 18;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const LJM_IPv4_STRING_SIZE: _bindgen_ty_4 = 16;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const LJM_BYTES_PER_REGISTER: ::std::os::raw::c_int = 2;
pub const LJM_dtANY: _bindgen_ty_5 = 0;
pub const LJM_dtT4: _bindgen_ty_5 = 4;
pub const LJM_dtT7: _bindgen_ty_5 = 7;
pub const LJM_dtDIGIT: _bindgen_ty_5 = 200;
pub const LJM_dtTSERIES: _bindgen_ty_5 = 84;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const LJM_ctANY: _bindgen_ty_6 = 0;
pub const LJM_ctANY_TCP: _bindgen_ty_6 = 0;
pub const LJM_ctUSB: _bindgen_ty_6 = 1;
pub const LJM_ctTCP: _bindgen_ty_6 = 2;
pub const LJM_ctNETWORK_TCP: _bindgen_ty_6 = 2;
pub const LJM_ctETHERNET: _bindgen_ty_6 = 3;
pub const LJM_ctETHERNET_TCP: _bindgen_ty_6 = 3;
pub const LJM_ctWIFI: _bindgen_ty_6 = 4;
pub const LJM_ctWIFI_TCP: _bindgen_ty_6 = 4;
pub const LJM_ctNETWORK_UDP: _bindgen_ty_6 = 5;
pub const LJM_ctETHERNET_UDP: _bindgen_ty_6 = 6;
pub const LJM_ctWIFI_UDP: _bindgen_ty_6 = 7;
pub const LJM_ctNETWORK_ANY: _bindgen_ty_6 = 8;
pub const LJM_ctETHERNET_ANY: _bindgen_ty_6 = 9;
pub const LJM_ctWIFI_ANY: _bindgen_ty_6 = 10;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const LJM_TCP_PORT: ::std::os::raw::c_int = 502;
pub const LJM_ETHERNET_UDP_PORT: ::std::os::raw::c_int = 52362;
pub const LJM_WIFI_UDP_PORT: ::std::os::raw::c_int = 502;
pub const LJM_NO_IP_ADDRESS: ::std::os::raw::c_int = 0;
pub const LJM_NO_PORT: ::std::os::raw::c_int = 0;
pub const LJM_DEMO_MODE: &[u8; 3usize] = b"-2\0";
pub const LJM_idANY: ::std::os::raw::c_int = 0;
pub const LJM_DEFAULT_FEEDBACK_ALLOCATION_SIZE: _bindgen_ty_7 = 62;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const LJM_USE_DEFAULT_MAXBYTESPERMBFB: ::std::os::raw::c_int = 0;
pub const LJM_DEFAULT_UNIT_ID: ::std::os::raw::c_int = 1;
pub const LJM_LIST_ALL_SIZE: _bindgen_ty_8 = 128;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const LJM_NO_TIMEOUT: ::std::os::raw::c_int = 0;
pub const LJM_DEFAULT_USB_SEND_RECEIVE_TIMEOUT_MS: ::std::os::raw::c_int = 2600;
pub const LJM_DEFAULT_ETHERNET_OPEN_TIMEOUT_MS: ::std::os::raw::c_int = 1000;
pub const LJM_DEFAULT_ETHERNET_SEND_RECEIVE_TIMEOUT_MS: ::std::os::raw::c_int = 2600;
pub const LJM_DEFAULT_WIFI_OPEN_TIMEOUT_MS: ::std::os::raw::c_int = 1000;
pub const LJM_DEFAULT_WIFI_SEND_RECEIVE_TIMEOUT_MS: ::std::os::raw::c_int = 4000;
pub const LJM_DUMMY_VALUE: ::std::os::raw::c_int = -9999;
pub const LJM_SCAN_NOT_READ: ::std::os::raw::c_int = -8888;
pub const LJM_GND: ::std::os::raw::c_int = 199;
pub const LJME_NOERROR: ::std::os::raw::c_int = 0;
pub const LJME_WARNINGS_BEGIN: ::std::os::raw::c_int = 200;
pub const LJME_WARNINGS_END: ::std::os::raw::c_int = 399;
pub const LJME_FRAMES_OMITTED_DUE_TO_PACKET_SIZE: ::std::os::raw::c_int = 201;
pub const LJME_DEBUG_LOG_FAILURE: ::std::os::raw::c_int = 202;
pub const LJME_USING_DEFAULT_CALIBRATION: ::std::os::raw::c_int = 203;
pub const LJME_DEBUG_LOG_FILE_NOT_OPEN: ::std::os::raw::c_int = 204;
pub const LJME_MODBUS_ERRORS_BEGIN: ::std::os::raw::c_int = 1200;
pub const LJME_MODBUS_ERRORS_END: ::std::os::raw::c_int = 1216;
pub const LJME_MBE1_ILLEGAL_FUNCTION: ::std::os::raw::c_int = 1201;
pub const LJME_MBE2_ILLEGAL_DATA_ADDRESS: ::std::os::raw::c_int = 1202;
pub const LJME_MBE3_ILLEGAL_DATA_VALUE: ::std::os::raw::c_int = 1203;
pub const LJME_MBE4_SLAVE_DEVICE_FAILURE: ::std::os::raw::c_int = 1204;
pub const LJME_MBE5_ACKNOWLEDGE: ::std::os::raw::c_int = 1205;
pub const LJME_MBE6_SLAVE_DEVICE_BUSY: ::std::os::raw::c_int = 1206;
pub const LJME_MBE8_MEMORY_PARITY_ERROR: ::std::os::raw::c_int = 1208;
pub const LJME_MBE10_GATEWAY_PATH_UNAVAILABLE: ::std::os::raw::c_int = 1210;
pub const LJME_MBE11_GATEWAY_TARGET_NO_RESPONSE: ::std::os::raw::c_int = 1211;
pub const LJME_LIBRARY_ERRORS_BEGIN: ::std::os::raw::c_int = 1220;
pub const LJME_LIBRARY_ERRORS_END: ::std::os::raw::c_int = 1399;
pub const LJME_UNKNOWN_ERROR: ::std::os::raw::c_int = 1221;
pub const LJME_INVALID_DEVICE_TYPE: ::std::os::raw::c_int = 1222;
pub const LJME_INVALID_HANDLE: ::std::os::raw::c_int = 1223;
pub const LJME_DEVICE_NOT_OPEN: ::std::os::raw::c_int = 1224;
pub const LJME_STREAM_NOT_INITIALIZED: ::std::os::raw::c_int = 1225;
pub const LJME_DEVICE_DISCONNECTED: ::std::os::raw::c_int = 1226;
pub const LJME_DEVICE_NOT_FOUND: ::std::os::raw::c_int = 1227;
pub const LJME_DEVICE_ALREADY_OPEN: ::std::os::raw::c_int = 1229;
pub const LJME_DEVICE_CURRENTLY_CLAIMED_BY_ANOTHER_PROCESS: ::std::os::raw::c_int = 1230;
pub const LJME_CANNOT_CONNECT: ::std::os::raw::c_int = 1231;
pub const LJME_SOCKET_LEVEL_ERROR: ::std::os::raw::c_int = 1233;
pub const LJME_CANNOT_OPEN_DEVICE: ::std::os::raw::c_int = 1236;
pub const LJME_CANNOT_DISCONNECT: ::std::os::raw::c_int = 1237;
pub const LJME_WINSOCK_FAILURE: ::std::os::raw::c_int = 1238;
pub const LJME_RECONNECT_FAILED: ::std::os::raw::c_int = 1239;
pub const LJME_CONNECTION_HAS_YIELDED_RECONNECT_FAILED: ::std::os::raw::c_int = 1240;
pub const LJME_USB_FAILURE: ::std::os::raw::c_int = 1241;
pub const LJME_U3_NOT_SUPPORTED_BY_LJM: ::std::os::raw::c_int = 1243;
pub const LJME_U6_NOT_SUPPORTED_BY_LJM: ::std::os::raw::c_int = 1246;
pub const LJME_UE9_NOT_SUPPORTED_BY_LJM: ::std::os::raw::c_int = 1249;
pub const LJME_INVALID_ADDRESS: ::std::os::raw::c_int = 1250;
pub const LJME_INVALID_CONNECTION_TYPE: ::std::os::raw::c_int = 1251;
pub const LJME_INVALID_DIRECTION: ::std::os::raw::c_int = 1252;
pub const LJME_INVALID_FUNCTION: ::std::os::raw::c_int = 1253;
pub const LJME_INVALID_NUM_REGISTERS: ::std::os::raw::c_int = 1254;
pub const LJME_INVALID_PARAMETER: ::std::os::raw::c_int = 1255;
pub const LJME_INVALID_PROTOCOL_ID: ::std::os::raw::c_int = 1256;
pub const LJME_INVALID_TRANSACTION_ID: ::std::os::raw::c_int = 1257;
pub const LJME_UNKNOWN_VALUE_TYPE: ::std::os::raw::c_int = 1259;
pub const LJME_MEMORY_ALLOCATION_FAILURE: ::std::os::raw::c_int = 1260;
pub const LJME_NO_COMMAND_BYTES_SENT: ::std::os::raw::c_int = 1261;
pub const LJME_INCORRECT_NUM_COMMAND_BYTES_SENT: ::std::os::raw::c_int = 1262;
pub const LJME_NO_RESPONSE_BYTES_RECEIVED: ::std::os::raw::c_int = 1263;
pub const LJME_INCORRECT_NUM_RESPONSE_BYTES_RECEIVED: ::std::os::raw::c_int = 1264;
pub const LJME_MIXED_FORMAT_IP_ADDRESS: ::std::os::raw::c_int = 1265;
pub const LJME_UNKNOWN_IDENTIFIER: ::std::os::raw::c_int = 1266;
pub const LJME_NOT_IMPLEMENTED: ::std::os::raw::c_int = 1267;
pub const LJME_INVALID_INDEX: ::std::os::raw::c_int = 1268;
pub const LJME_INVALID_LENGTH: ::std::os::raw::c_int = 1269;
pub const LJME_ERROR_BIT_SET: ::std::os::raw::c_int = 1270;
pub const LJME_INVALID_MAXBYTESPERMBFB: ::std::os::raw::c_int = 1271;
pub const LJME_NULL_POINTER: ::std::os::raw::c_int = 1272;
pub const LJME_NULL_OBJ: ::std::os::raw::c_int = 1273;
pub const LJME_RESERVED_NAME: ::std::os::raw::c_int = 1274;
pub const LJME_UNPARSABLE_DEVICE_TYPE: ::std::os::raw::c_int = 1275;
pub const LJME_UNPARSABLE_CONNECTION_TYPE: ::std::os::raw::c_int = 1276;
pub const LJME_UNPARSABLE_IDENTIFIER: ::std::os::raw::c_int = 1277;
pub const LJME_PACKET_SIZE_TOO_LARGE: ::std::os::raw::c_int = 1278;
pub const LJME_TRANSACTION_ID_ERR: ::std::os::raw::c_int = 1279;
pub const LJME_PROTOCOL_ID_ERR: ::std::os::raw::c_int = 1280;
pub const LJME_LENGTH_ERR: ::std::os::raw::c_int = 1281;
pub const LJME_UNIT_ID_ERR: ::std::os::raw::c_int = 1282;
pub const LJME_FUNCTION_ERR: ::std::os::raw::c_int = 1283;
pub const LJME_STARTING_REG_ERR: ::std::os::raw::c_int = 1284;
pub const LJME_NUM_REGS_ERR: ::std::os::raw::c_int = 1285;
pub const LJME_NUM_BYTES_ERR: ::std::os::raw::c_int = 1286;
pub const LJME_CONFIG_FILE_NOT_FOUND: ::std::os::raw::c_int = 1289;
pub const LJME_CONFIG_PARSING_ERROR: ::std::os::raw::c_int = 1290;
pub const LJME_INVALID_NUM_VALUES: ::std::os::raw::c_int = 1291;
pub const LJME_CONSTANTS_FILE_NOT_FOUND: ::std::os::raw::c_int = 1292;
pub const LJME_INVALID_CONSTANTS_FILE: ::std::os::raw::c_int = 1293;
pub const LJME_INVALID_NAME: ::std::os::raw::c_int = 1294;
pub const LJME_OVERSPECIFIED_PORT: ::std::os::raw::c_int = 1296;
pub const LJME_INTENT_NOT_READY: ::std::os::raw::c_int = 1297;
pub const LJME_ATTR_LOAD_COMM_FAILURE: ::std::os::raw::c_int = 1298;
pub const LJME_INVALID_CONFIG_NAME: ::std::os::raw::c_int = 1299;
pub const LJME_ERROR_RETRIEVAL_FAILURE: ::std::os::raw::c_int = 1300;
pub const LJME_LJM_BUFFER_FULL: ::std::os::raw::c_int = 1301;
pub const LJME_COULD_NOT_START_STREAM: ::std::os::raw::c_int = 1302;
pub const LJME_STREAM_NOT_RUNNING: ::std::os::raw::c_int = 1303;
pub const LJME_UNABLE_TO_STOP_STREAM: ::std::os::raw::c_int = 1304;
pub const LJME_INVALID_VALUE: ::std::os::raw::c_int = 1305;
pub const LJME_SYNCHRONIZATION_TIMEOUT: ::std::os::raw::c_int = 1306;
pub const LJME_OLD_FIRMWARE: ::std::os::raw::c_int = 1307;
pub const LJME_CANNOT_READ_OUT_ONLY_STREAM: ::std::os::raw::c_int = 1308;
pub const LJME_NO_SCANS_RETURNED: ::std::os::raw::c_int = 1309;
pub const LJME_TEMPERATURE_OUT_OF_RANGE: ::std::os::raw::c_int = 1310;
pub const LJME_VOLTAGE_OUT_OF_RANGE: ::std::os::raw::c_int = 1311;
pub const LJME_FUNCTION_DOES_NOT_SUPPORT_THIS_TYPE: ::std::os::raw::c_int = 1312;
pub const LJME_INVALID_INFO_HANDLE: ::std::os::raw::c_int = 1313;
pub const LJME_NO_DEVICES_FOUND: ::std::os::raw::c_int = 1314;
pub const LJME_AUTO_IPS_FILE_NOT_FOUND: ::std::os::raw::c_int = 1316;
pub const LJME_AUTO_IPS_FILE_INVALID: ::std::os::raw::c_int = 1317;
pub const LJME_INVALID_INTERVAL_HANDLE: ::std::os::raw::c_int = 1318;
pub const LJME_NAMED_MUTEX_PERMISSION_DENIED: ::std::os::raw::c_int = 1319;
pub const LJME_DIGITAL_AUTO_RECOVERY_ERROR_DETECTED: ::std::os::raw::c_int = 1320;
pub const LJME_NEGATIVE_RECEIVE_BUFFER_SIZE: ::std::os::raw::c_int = 1321;
extern "C" {
    pub fn LJM_ListAll(
        DeviceType: ::std::os::raw::c_int,
        ConnectionType: ::std::os::raw::c_int,
        NumFound: *mut ::std::os::raw::c_int,
        aDeviceTypes: *mut ::std::os::raw::c_int,
        aConnectionTypes: *mut ::std::os::raw::c_int,
        aSerialNumbers: *mut ::std::os::raw::c_int,
        aIPAddresses: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_ListAllS(
        DeviceType: *const ::std::os::raw::c_char,
        ConnectionType: *const ::std::os::raw::c_char,
        NumFound: *mut ::std::os::raw::c_int,
        aDeviceTypes: *mut ::std::os::raw::c_int,
        aConnectionTypes: *mut ::std::os::raw::c_int,
        aSerialNumbers: *mut ::std::os::raw::c_int,
        aIPAddresses: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_ListAllExtended(
        DeviceType: ::std::os::raw::c_int,
        ConnectionType: ::std::os::raw::c_int,
        NumAddresses: ::std::os::raw::c_int,
        aAddresses: *const ::std::os::raw::c_int,
        aNumRegs: *const ::std::os::raw::c_int,
        MaxNumFound: ::std::os::raw::c_int,
        NumFound: *mut ::std::os::raw::c_int,
        aDeviceTypes: *mut ::std::os::raw::c_int,
        aConnectionTypes: *mut ::std::os::raw::c_int,
        aSerialNumbers: *mut ::std::os::raw::c_int,
        aIPAddresses: *mut ::std::os::raw::c_int,
        aBytes: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_OpenS(
        DeviceType: *const ::std::os::raw::c_char,
        ConnectionType: *const ::std::os::raw::c_char,
        Identifier: *const ::std::os::raw::c_char,
        Handle: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_Open(
        DeviceType: ::std::os::raw::c_int,
        ConnectionType: ::std::os::raw::c_int,
        Identifier: *const ::std::os::raw::c_char,
        Handle: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_GetHandleInfo(
        Handle: ::std::os::raw::c_int,
        DeviceType: *mut ::std::os::raw::c_int,
        ConnectionType: *mut ::std::os::raw::c_int,
        SerialNumber: *mut ::std::os::raw::c_int,
        IPAddress: *mut ::std::os::raw::c_int,
        Port: *mut ::std::os::raw::c_int,
        MaxBytesPerMB: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_Close(Handle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_CloseAll() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_CleanInfo(InfoHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eWriteAddress(
        Handle: ::std::os::raw::c_int,
        Address: ::std::os::raw::c_int,
        Type: ::std::os::raw::c_int,
        Value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eReadAddress(
        Handle: ::std::os::raw::c_int,
        Address: ::std::os::raw::c_int,
        Type: ::std::os::raw::c_int,
        Value: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eWriteName(
        Handle: ::std::os::raw::c_int,
        Name: *const ::std::os::raw::c_char,
        Value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eReadName(
        Handle: ::std::os::raw::c_int,
        Name: *const ::std::os::raw::c_char,
        Value: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eReadAddresses(
        Handle: ::std::os::raw::c_int,
        NumFrames: ::std::os::raw::c_int,
        aAddresses: *const ::std::os::raw::c_int,
        aTypes: *const ::std::os::raw::c_int,
        aValues: *mut f64,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eReadNames(
        Handle: ::std::os::raw::c_int,
        NumFrames: ::std::os::raw::c_int,
        aNames: *mut *const ::std::os::raw::c_char,
        aValues: *mut f64,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eWriteAddresses(
        Handle: ::std::os::raw::c_int,
        NumFrames: ::std::os::raw::c_int,
        aAddresses: *const ::std::os::raw::c_int,
        aTypes: *const ::std::os::raw::c_int,
        aValues: *const f64,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eWriteNames(
        Handle: ::std::os::raw::c_int,
        NumFrames: ::std::os::raw::c_int,
        aNames: *mut *const ::std::os::raw::c_char,
        aValues: *const f64,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eReadAddressArray(
        Handle: ::std::os::raw::c_int,
        Address: ::std::os::raw::c_int,
        Type: ::std::os::raw::c_int,
        NumValues: ::std::os::raw::c_int,
        aValues: *mut f64,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eReadNameArray(
        Handle: ::std::os::raw::c_int,
        Name: *const ::std::os::raw::c_char,
        NumValues: ::std::os::raw::c_int,
        aValues: *mut f64,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eWriteAddressArray(
        Handle: ::std::os::raw::c_int,
        Address: ::std::os::raw::c_int,
        Type: ::std::os::raw::c_int,
        NumValues: ::std::os::raw::c_int,
        aValues: *const f64,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eWriteNameArray(
        Handle: ::std::os::raw::c_int,
        Name: *const ::std::os::raw::c_char,
        NumValues: ::std::os::raw::c_int,
        aValues: *const f64,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eReadAddressByteArray(
        Handle: ::std::os::raw::c_int,
        Address: ::std::os::raw::c_int,
        NumBytes: ::std::os::raw::c_int,
        aBytes: *mut ::std::os::raw::c_char,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eReadNameByteArray(
        Handle: ::std::os::raw::c_int,
        Name: *const ::std::os::raw::c_char,
        NumBytes: ::std::os::raw::c_int,
        aBytes: *mut ::std::os::raw::c_char,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eWriteAddressByteArray(
        Handle: ::std::os::raw::c_int,
        Address: ::std::os::raw::c_int,
        NumBytes: ::std::os::raw::c_int,
        aBytes: *const ::std::os::raw::c_char,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eWriteNameByteArray(
        Handle: ::std::os::raw::c_int,
        Name: *const ::std::os::raw::c_char,
        NumBytes: ::std::os::raw::c_int,
        aBytes: *const ::std::os::raw::c_char,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eAddresses(
        Handle: ::std::os::raw::c_int,
        NumFrames: ::std::os::raw::c_int,
        aAddresses: *const ::std::os::raw::c_int,
        aTypes: *const ::std::os::raw::c_int,
        aWrites: *const ::std::os::raw::c_int,
        aNumValues: *const ::std::os::raw::c_int,
        aValues: *mut f64,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eNames(
        Handle: ::std::os::raw::c_int,
        NumFrames: ::std::os::raw::c_int,
        aNames: *mut *const ::std::os::raw::c_char,
        aWrites: *const ::std::os::raw::c_int,
        aNumValues: *const ::std::os::raw::c_int,
        aValues: *mut f64,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eReadNameString(
        Handle: ::std::os::raw::c_int,
        Name: *const ::std::os::raw::c_char,
        String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eReadAddressString(
        Handle: ::std::os::raw::c_int,
        Address: ::std::os::raw::c_int,
        String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eWriteNameString(
        Handle: ::std::os::raw::c_int,
        Name: *const ::std::os::raw::c_char,
        String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eWriteAddressString(
        Handle: ::std::os::raw::c_int,
        Address: ::std::os::raw::c_int,
        String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eStreamStart(
        Handle: ::std::os::raw::c_int,
        ScansPerRead: ::std::os::raw::c_int,
        NumAddresses: ::std::os::raw::c_int,
        aScanList: *const ::std::os::raw::c_int,
        ScanRate: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eStreamRead(
        Handle: ::std::os::raw::c_int,
        aData: *mut f64,
        DeviceScanBacklog: *mut ::std::os::raw::c_int,
        LJMScanBacklog: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type LJM_StreamReadCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn LJM_SetStreamCallback(
        Handle: ::std::os::raw::c_int,
        Callback: LJM_StreamReadCallback,
        Arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_eStreamStop(Handle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_StreamBurst(
        Handle: ::std::os::raw::c_int,
        NumAddresses: ::std::os::raw::c_int,
        aScanList: *const ::std::os::raw::c_int,
        ScanRate: *mut f64,
        NumScans: ::std::os::raw::c_uint,
        aData: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_GetStreamTCPReceiveBufferStatus(
        Handle: ::std::os::raw::c_int,
        ReceiveBufferBytesSize: *mut ::std::os::raw::c_uint,
        ReceiveBufferBytesBacklog: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_WriteRaw(
        Handle: ::std::os::raw::c_int,
        Data: *const ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_ReadRaw(
        Handle: ::std::os::raw::c_int,
        Data: *mut ::std::os::raw::c_uchar,
        NumBytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_AddressesToMBFB(
        MaxBytesPerMBFB: ::std::os::raw::c_int,
        aAddresses: *const ::std::os::raw::c_int,
        aTypes: *const ::std::os::raw::c_int,
        aWrites: *const ::std::os::raw::c_int,
        aNumValues: *const ::std::os::raw::c_int,
        aValues: *const f64,
        NumFrames: *mut ::std::os::raw::c_int,
        aMBFBCommand: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_MBFBComm(
        Handle: ::std::os::raw::c_int,
        UnitID: ::std::os::raw::c_uchar,
        aMBFB: *mut ::std::os::raw::c_uchar,
        ErrorAddress: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_UpdateValues(
        aMBFBResponse: *mut ::std::os::raw::c_uchar,
        aTypes: *const ::std::os::raw::c_int,
        aWrites: *const ::std::os::raw::c_int,
        aNumValues: *const ::std::os::raw::c_int,
        NumFrames: ::std::os::raw::c_int,
        aValues: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_NamesToAddresses(
        NumFrames: ::std::os::raw::c_int,
        aNames: *mut *const ::std::os::raw::c_char,
        aAddresses: *mut ::std::os::raw::c_int,
        aTypes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_NameToAddress(
        Name: *const ::std::os::raw::c_char,
        Address: *mut ::std::os::raw::c_int,
        Type: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_AddressesToTypes(
        NumAddresses: ::std::os::raw::c_int,
        aAddresses: *mut ::std::os::raw::c_int,
        aTypes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_AddressToType(
        Address: ::std::os::raw::c_int,
        Type: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_LookupConstantValue(
        Scope: *const ::std::os::raw::c_char,
        ConstantName: *const ::std::os::raw::c_char,
        ConstantValue: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_LookupConstantName(
        Scope: *const ::std::os::raw::c_char,
        ConstantValue: f64,
        ConstantName: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_ErrorToString(
        ErrorCode: ::std::os::raw::c_int,
        ErrorString: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn LJM_LoadConstants();
}
extern "C" {
    pub fn LJM_LoadConstantsFromFile(
        FileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_LoadConstantsFromString(
        JsonString: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const LJM_ttB: ::std::os::raw::c_long = 6001;
pub const LJM_ttE: ::std::os::raw::c_long = 6002;
pub const LJM_ttJ: ::std::os::raw::c_long = 6003;
pub const LJM_ttK: ::std::os::raw::c_long = 6004;
pub const LJM_ttN: ::std::os::raw::c_long = 6005;
pub const LJM_ttR: ::std::os::raw::c_long = 6006;
pub const LJM_ttS: ::std::os::raw::c_long = 6007;
pub const LJM_ttT: ::std::os::raw::c_long = 6008;
pub const LJM_ttC: ::std::os::raw::c_long = 6009;
extern "C" {
    pub fn LJM_TCVoltsToTemp(
        TCType: ::std::os::raw::c_int,
        TCVolts: f64,
        CJTempK: f64,
        pTCTempK: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_FLOAT32ToByteArray(
        aFLOAT32: *const f32,
        RegisterOffset: ::std::os::raw::c_int,
        NumFLOAT32: ::std::os::raw::c_int,
        aBytes: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn LJM_ByteArrayToFLOAT32(
        aBytes: *const ::std::os::raw::c_uchar,
        RegisterOffset: ::std::os::raw::c_int,
        NumFLOAT32: ::std::os::raw::c_int,
        aFLOAT32: *mut f32,
    );
}
extern "C" {
    pub fn LJM_UINT16ToByteArray(
        aUINT16: *const ::std::os::raw::c_ushort,
        RegisterOffset: ::std::os::raw::c_int,
        NumUINT16: ::std::os::raw::c_int,
        aBytes: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn LJM_ByteArrayToUINT16(
        aBytes: *const ::std::os::raw::c_uchar,
        RegisterOffset: ::std::os::raw::c_int,
        NumUINT16: ::std::os::raw::c_int,
        aUINT16: *mut ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn LJM_UINT32ToByteArray(
        aUINT32: *const ::std::os::raw::c_uint,
        RegisterOffset: ::std::os::raw::c_int,
        NumUINT32: ::std::os::raw::c_int,
        aBytes: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn LJM_ByteArrayToUINT32(
        aBytes: *const ::std::os::raw::c_uchar,
        RegisterOffset: ::std::os::raw::c_int,
        NumUINT32: ::std::os::raw::c_int,
        aUINT32: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn LJM_INT32ToByteArray(
        aINT32: *const ::std::os::raw::c_int,
        RegisterOffset: ::std::os::raw::c_int,
        NumINT32: ::std::os::raw::c_int,
        aBytes: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn LJM_ByteArrayToINT32(
        aBytes: *const ::std::os::raw::c_uchar,
        RegisterOffset: ::std::os::raw::c_int,
        NumINT32: ::std::os::raw::c_int,
        aINT32: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn LJM_NumberToIP(
        Number: ::std::os::raw::c_uint,
        IPv4String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_IPToNumber(
        IPv4String: *const ::std::os::raw::c_char,
        Number: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_NumberToMAC(
        Number: ::std::os::raw::c_ulonglong,
        MACString: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_MACToNumber(
        MACString: *const ::std::os::raw::c_char,
        Number: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_GetHostTick() -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn LJM_GetHostTick32Bit(
        TickUpper: *mut ::std::os::raw::c_uint,
        TickLower: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn LJM_StartInterval(
        IntervalHandle: ::std::os::raw::c_int,
        Microseconds: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_WaitForNextInterval(
        IntervalHandle: ::std::os::raw::c_int,
        SkippedIntervals: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_CleanInterval(IntervalHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const LJM_USB_SEND_RECEIVE_TIMEOUT_MS: &[u8; 32usize] = b"LJM_USB_SEND_RECEIVE_TIMEOUT_MS\0";
pub const LJM_ETHERNET_SEND_RECEIVE_TIMEOUT_MS: &[u8; 37usize] =
    b"LJM_ETHERNET_SEND_RECEIVE_TIMEOUT_MS\0";
pub const LJM_WIFI_SEND_RECEIVE_TIMEOUT_MS: &[u8; 33usize] = b"LJM_WIFI_SEND_RECEIVE_TIMEOUT_MS\0";
pub const LJM_SEND_RECEIVE_TIMEOUT_MS: &[u8; 28usize] = b"LJM_SEND_RECEIVE_TIMEOUT_MS\0";
pub const LJM_ETHERNET_OPEN_TIMEOUT_MS: &[u8; 29usize] = b"LJM_ETHERNET_OPEN_TIMEOUT_MS\0";
pub const LJM_WIFI_OPEN_TIMEOUT_MS: &[u8; 25usize] = b"LJM_WIFI_OPEN_TIMEOUT_MS\0";
pub const LJM_OPEN_TCP_DEVICE_TIMEOUT_MS: &[u8; 31usize] = b"LJM_OPEN_TCP_DEVICE_TIMEOUT_MS\0";
pub const LJM_DEBUG_LOG_MODE: &[u8; 19usize] = b"LJM_DEBUG_LOG_MODE\0";
pub const LJM_DEBUG_LOG_MODE_NEVER: _bindgen_ty_9 = 1;
pub const LJM_DEBUG_LOG_MODE_CONTINUOUS: _bindgen_ty_9 = 2;
pub const LJM_DEBUG_LOG_MODE_ON_ERROR: _bindgen_ty_9 = 3;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const LJM_DEBUG_LOG_LEVEL: &[u8; 20usize] = b"LJM_DEBUG_LOG_LEVEL\0";
pub const LJM_STREAM_PACKET: _bindgen_ty_10 = 1;
pub const LJM_TRACE: _bindgen_ty_10 = 2;
pub const LJM_DEBUG: _bindgen_ty_10 = 4;
pub const LJM_INFO: _bindgen_ty_10 = 6;
pub const LJM_PACKET: _bindgen_ty_10 = 7;
pub const LJM_WARNING: _bindgen_ty_10 = 8;
pub const LJM_USER: _bindgen_ty_10 = 9;
pub const LJM_ERROR: _bindgen_ty_10 = 10;
pub const LJM_FATAL: _bindgen_ty_10 = 12;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const LJM_DEBUG_LOG_BUFFER_MAX_SIZE: &[u8; 30usize] = b"LJM_DEBUG_LOG_BUFFER_MAX_SIZE\0";
pub const LJM_DEBUG_LOG_SLEEP_TIME_MS: &[u8; 28usize] = b"LJM_DEBUG_LOG_SLEEP_TIME_MS\0";
pub const LJM_LIBRARY_VERSION: &[u8; 20usize] = b"LJM_LIBRARY_VERSION\0";
pub const LJM_ALLOWS_AUTO_MULTIPLE_FEEDBACKS: &[u8; 35usize] =
    b"LJM_ALLOWS_AUTO_MULTIPLE_FEEDBACKS\0";
pub const LJM_ALLOWS_AUTO_CONDENSE_ADDRESSES: &[u8; 35usize] =
    b"LJM_ALLOWS_AUTO_CONDENSE_ADDRESSES\0";
pub const LJM_AUTO_IPS_FILE: &[u8; 18usize] = b"LJM_AUTO_IPS_FILE\0";
pub const LJM_AUTO_IPS: &[u8; 13usize] = b"LJM_AUTO_IPS\0";
pub const LJM_AUTO_RECONNECT_STICKY_CONNECTION: &[u8; 37usize] =
    b"LJM_AUTO_RECONNECT_STICKY_CONNECTION\0";
pub const LJM_AUTO_RECONNECT_STICKY_SERIAL: &[u8; 33usize] = b"LJM_AUTO_RECONNECT_STICKY_SERIAL\0";
pub const LJM_AUTO_RECONNECT_WAIT_MS: &[u8; 27usize] = b"LJM_AUTO_RECONNECT_WAIT_MS\0";
pub const LJM_MODBUS_MAP_CONSTANTS_FILE: &[u8; 30usize] = b"LJM_MODBUS_MAP_CONSTANTS_FILE\0";
pub const LJM_ERROR_CONSTANTS_FILE: &[u8; 25usize] = b"LJM_ERROR_CONSTANTS_FILE\0";
pub const LJM_DEBUG_LOG_FILE: &[u8; 19usize] = b"LJM_DEBUG_LOG_FILE\0";
pub const LJM_CONSTANTS_FILE: &[u8; 19usize] = b"LJM_CONSTANTS_FILE\0";
pub const LJM_DEBUG_LOG_FILE_MAX_SIZE: &[u8; 28usize] = b"LJM_DEBUG_LOG_FILE_MAX_SIZE\0";
pub const LJM_DEEP_SEARCH_FILE: &[u8; 21usize] = b"LJM_DEEP_SEARCH_FILE\0";
pub const LJM_SPECIFIC_IPS_FILE: &[u8; 22usize] = b"LJM_SPECIFIC_IPS_FILE\0";
pub const LJM_STREAM_AIN_BINARY: &[u8; 22usize] = b"LJM_STREAM_AIN_BINARY\0";
pub const LJM_STREAM_DIGITAL_AUTO_RECOVERY_ERROR_DETECTION_DISABLED: &[u8; 58usize] =
    b"LJM_STREAM_DIGITAL_AUTO_RECOVERY_ERROR_DETECTION_DISABLED\0";
pub const LJM_STREAM_SCANS_RETURN: &[u8; 24usize] = b"LJM_STREAM_SCANS_RETURN\0";
pub const LJM_STREAM_SCANS_RETURN_ALL: _bindgen_ty_11 = 1;
pub const LJM_STREAM_SCANS_RETURN_ALL_OR_NONE: _bindgen_ty_11 = 2;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const LJM_STREAM_RECEIVE_TIMEOUT_MODE: &[u8; 32usize] = b"LJM_STREAM_RECEIVE_TIMEOUT_MODE\0";
pub const LJM_STREAM_RECEIVE_TIMEOUT_MODE_CALCULATED: _bindgen_ty_12 = 1;
pub const LJM_STREAM_RECEIVE_TIMEOUT_MODE_MANUAL: _bindgen_ty_12 = 2;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub const LJM_STREAM_TCP_RECEIVE_BUFFER_SIZE: &[u8; 35usize] =
    b"LJM_STREAM_TCP_RECEIVE_BUFFER_SIZE\0";
pub const LJM_STREAM_RECEIVE_TIMEOUT_MS: &[u8; 30usize] = b"LJM_STREAM_RECEIVE_TIMEOUT_MS\0";
pub const LJM_STREAM_TRANSFERS_PER_SECOND: &[u8; 32usize] = b"LJM_STREAM_TRANSFERS_PER_SECOND\0";
pub const LJM_RETRY_ON_TRANSACTION_ID_MISMATCH: &[u8; 37usize] =
    b"LJM_RETRY_ON_TRANSACTION_ID_MISMATCH\0";
pub const LJM_OLD_FIRMWARE_CHECK: &[u8; 23usize] = b"LJM_OLD_FIRMWARE_CHECK\0";
pub const LJM_USE_TCP_INIT_FOR_T7_WIFI_TCP: &[u8; 33usize] = b"LJM_USE_TCP_INIT_FOR_T7_WIFI_TCP\0";
pub const LJM_ZERO_LENGTH_ARRAY_MODE: &[u8; 27usize] = b"LJM_ZERO_LENGTH_ARRAY_MODE\0";
pub const LJM_ZERO_LENGTH_ARRAY_ERROR: _bindgen_ty_13 = 1;
pub const LJM_ZERO_LENGTH_ARRAY_IGNORE_OPERATION: _bindgen_ty_13 = 2;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
extern "C" {
    pub fn LJM_WriteLibraryConfigS(
        Parameter: *const ::std::os::raw::c_char,
        Value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_WriteLibraryConfigStringS(
        Parameter: *const ::std::os::raw::c_char,
        String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_ReadLibraryConfigS(
        Parameter: *const ::std::os::raw::c_char,
        Value: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_ReadLibraryConfigStringS(
        Parameter: *const ::std::os::raw::c_char,
        String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_LoadConfigurationFile(
        FileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_GetSpecificIPsInfo(
        InfoHandle: *mut ::std::os::raw::c_int,
        Info: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_GetDeepSearchInfo(
        InfoHandle: *mut ::std::os::raw::c_int,
        Info: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_Log(
        Level: ::std::os::raw::c_int,
        String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LJM_ResetLog() -> ::std::os::raw::c_int;
}
pub type LJM_DeviceReconnectCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn LJM_RegisterDeviceReconnectCallback(
        Handle: ::std::os::raw::c_int,
        Callback: LJM_DeviceReconnectCallback,
    ) -> ::std::os::raw::c_int;
}
pub const LJM_DEFAULT_PORT: ::std::os::raw::c_int = 502;
pub const LJM_UDP_PORT: ::std::os::raw::c_int = 52362;
pub const LJM_MAX_TCP_PACKET_NUM_BYTES_T7: ::std::os::raw::c_int = 1040;
pub const LJM_MAX_USB_PACKET_NUM_BYTES: ::std::os::raw::c_int = 64;
pub const LJM_MAX_ETHERNET_PACKET_NUM_BYTES_T7: ::std::os::raw::c_int = 1040;
pub const LJM_MAX_WIFI_PACKET_NUM_BYTES_T7: ::std::os::raw::c_int = 500;
pub const LJME_COULD_NOT_CLAIM_DEVICE: ::std::os::raw::c_int = 1230;
pub const LJME_U3_CANNOT_BE_OPENED_BY_LJM: ::std::os::raw::c_int = 1243;
pub const LJME_U6_CANNOT_BE_OPENED_BY_LJM: ::std::os::raw::c_int = 1246;
pub const LJME_UE9_CANNOT_BE_OPENED_BY_LJM: ::std::os::raw::c_int = 1249;
pub const LJME_INVALID_VALUE_TYPE: ::std::os::raw::c_int = 1259;
pub const LJM_SPECIAL_ADDRESSES_FILE: &[u8; 27usize] = b"LJM_SPECIAL_ADDRESSES_FILE\0";
pub const LJM_SPECIAL_ADDRESSES_STATUS: &[u8; 29usize] = b"LJM_SPECIAL_ADDRESSES_STATUS\0";
pub const LJM_OPEN_MODE: &[u8; 14usize] = b"LJM_OPEN_MODE\0";
pub const LJM_KEEP_OPEN: _bindgen_ty_14 = 1;
pub const LJM_OPEN_CLOSE: _bindgen_ty_14 = 2;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
