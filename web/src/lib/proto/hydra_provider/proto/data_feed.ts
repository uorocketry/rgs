// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "hydra_provider/proto/data_feed.proto" (package "data_feed", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message data_feed.ListAvailablePortsResponse
 */
export interface ListAvailablePortsResponse {
    /**
     * @generated from protobuf field: repeated string ports = 1;
     */
    ports: string[];
}
/**
 * @generated from protobuf message data_feed.SerialDataFeedConfig
 */
export interface SerialDataFeedConfig {
    /**
     * @generated from protobuf field: string port = 1;
     */
    port: string;
    /**
     * @generated from protobuf field: int32 baud_rate = 2;
     */
    baudRate: number;
}
/**
 * @generated from protobuf message data_feed.SerialDataFeedStatus
 */
export interface SerialDataFeedStatus {
    /**
     * @generated from protobuf field: bool is_running = 1;
     */
    isRunning: boolean;
    /**
     * @generated from protobuf field: data_feed.SerialDataFeedConfig config = 2;
     */
    config?: SerialDataFeedConfig;
}
/**
 * @generated from protobuf message data_feed.RandomDataFeedStatus
 */
export interface RandomDataFeedStatus {
    /**
     * @generated from protobuf field: bool is_running = 1;
     */
    isRunning: boolean;
}
// SHOULD DO: implement
// service FileDataFeed {
// 	rpc start(stream FileDataFeed) returns(Empty);
// 	rpc stop(Empty) returns(Empty);
// }
// message FileDataFeed {
// 	string name = 1;
// 	bytes chunk = 2;
// }

/**
 * @generated from protobuf message data_feed.Empty
 */
export interface Empty {
}
// @generated message type with reflection information, may provide speed optimized methods
class ListAvailablePortsResponse$Type extends MessageType<ListAvailablePortsResponse> {
    constructor() {
        super("data_feed.ListAvailablePortsResponse", [
            { no: 1, name: "ports", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListAvailablePortsResponse>): ListAvailablePortsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ports = [];
        if (value !== undefined)
            reflectionMergePartial<ListAvailablePortsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAvailablePortsResponse): ListAvailablePortsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string ports */ 1:
                    message.ports.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAvailablePortsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string ports = 1; */
        for (let i = 0; i < message.ports.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.ports[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data_feed.ListAvailablePortsResponse
 */
export const ListAvailablePortsResponse = new ListAvailablePortsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SerialDataFeedConfig$Type extends MessageType<SerialDataFeedConfig> {
    constructor() {
        super("data_feed.SerialDataFeedConfig", [
            { no: 1, name: "port", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "baud_rate", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SerialDataFeedConfig>): SerialDataFeedConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.port = "";
        message.baudRate = 0;
        if (value !== undefined)
            reflectionMergePartial<SerialDataFeedConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SerialDataFeedConfig): SerialDataFeedConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port */ 1:
                    message.port = reader.string();
                    break;
                case /* int32 baud_rate */ 2:
                    message.baudRate = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SerialDataFeedConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string port = 1; */
        if (message.port !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.port);
        /* int32 baud_rate = 2; */
        if (message.baudRate !== 0)
            writer.tag(2, WireType.Varint).int32(message.baudRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data_feed.SerialDataFeedConfig
 */
export const SerialDataFeedConfig = new SerialDataFeedConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SerialDataFeedStatus$Type extends MessageType<SerialDataFeedStatus> {
    constructor() {
        super("data_feed.SerialDataFeedStatus", [
            { no: 1, name: "is_running", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "config", kind: "message", T: () => SerialDataFeedConfig }
        ]);
    }
    create(value?: PartialMessage<SerialDataFeedStatus>): SerialDataFeedStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isRunning = false;
        if (value !== undefined)
            reflectionMergePartial<SerialDataFeedStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SerialDataFeedStatus): SerialDataFeedStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_running */ 1:
                    message.isRunning = reader.bool();
                    break;
                case /* data_feed.SerialDataFeedConfig config */ 2:
                    message.config = SerialDataFeedConfig.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SerialDataFeedStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_running = 1; */
        if (message.isRunning !== false)
            writer.tag(1, WireType.Varint).bool(message.isRunning);
        /* data_feed.SerialDataFeedConfig config = 2; */
        if (message.config)
            SerialDataFeedConfig.internalBinaryWrite(message.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data_feed.SerialDataFeedStatus
 */
export const SerialDataFeedStatus = new SerialDataFeedStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RandomDataFeedStatus$Type extends MessageType<RandomDataFeedStatus> {
    constructor() {
        super("data_feed.RandomDataFeedStatus", [
            { no: 1, name: "is_running", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RandomDataFeedStatus>): RandomDataFeedStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isRunning = false;
        if (value !== undefined)
            reflectionMergePartial<RandomDataFeedStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RandomDataFeedStatus): RandomDataFeedStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_running */ 1:
                    message.isRunning = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RandomDataFeedStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_running = 1; */
        if (message.isRunning !== false)
            writer.tag(1, WireType.Varint).bool(message.isRunning);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data_feed.RandomDataFeedStatus
 */
export const RandomDataFeedStatus = new RandomDataFeedStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("data_feed.Empty", []);
    }
    create(value?: PartialMessage<Empty>): Empty {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Empty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Empty): Empty {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Empty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message data_feed.Empty
 */
export const Empty = new Empty$Type();
/**
 * @generated ServiceType for protobuf service data_feed.SerialDataFeed
 */
export const SerialDataFeed = new ServiceType("data_feed.SerialDataFeed", [
    { name: "start", options: {}, I: Empty, O: Empty },
    { name: "stop", options: {}, I: Empty, O: Empty },
    { name: "list_available_ports", options: {}, I: Empty, O: ListAvailablePortsResponse },
    { name: "configure", options: {}, I: SerialDataFeedConfig, O: Empty },
    { name: "get_status", options: {}, I: Empty, O: SerialDataFeedStatus }
]);
/**
 * @generated ServiceType for protobuf service data_feed.RandomDataFeed
 */
export const RandomDataFeed = new ServiceType("data_feed.RandomDataFeed", [
    { name: "start", options: {}, I: Empty, O: Empty },
    { name: "stop", options: {}, I: Empty, O: Empty },
    { name: "is_running", options: {}, I: Empty, O: RandomDataFeedStatus }
]);
