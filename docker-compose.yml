name: rgs

services:
    traefik:
        image: traefik:v3.4
        networks:
            - web
        command:
            - "--api.insecure=true"
            - "--providers.docker=true"
            - "--entrypoints.web.address=:80"
            - "--log.level=INFO"
        ports:
            - "80:80"
            - "8080:8080"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.deny-all.rule=HostRegexp(`{host:.+}`)"
            - "traefik.http.routers.deny-all.entrypoints=web"
            - "traefik.http.routers.deny-all.priority=1"
            - "traefik.http.routers.deny-all.service=noop@internal"

    db:
        image: ghcr.io/tursodatabase/libsql-server:latest
        environment:
            SQLD_NODE: standalone
        volumes:
            - ./db/data:/var/lib/sqld
        networks:
            - web
        ports:
            - "5001:8080"
        labels:
            - "traefik.enable=false"

    migration:
        image: docker.io/oven/bun:1
        networks:
            - web
        volumes:
            - ./db:/app
        working_dir: /app
        command: [ "sh", "-c", "bun install && bun index.ts" ]
        environment:
            DATABASE_URL: http://db:8080
        depends_on:
            - db
        labels:
            - "traefik.enable=false"

    # Web dashboard running behind Traefik
    web:
        build:
            context: ./web
            dockerfile: Dockerfile.dev
        environment:
            - NODE_ENV=development
            - PORT=3000
            - WEB_SERVER_PORT=3000
            - DB_URL=http://db:8080
            - VITE_ALLOWED_HOSTS=uorocketry.ca,localhost,127.0.0.1,*.local
            - SVELTEKIT_ALLOWED_HOSTS=uorocketry.ca,localhost,127.0.0.1,*.locald
            - ALLOWED_SUBNETS=192.168.8.0/24,127.0.0.1/32,172.18.0.0/16
            # - PROTECTED_PATH_PREFIXES=/services/api
        volumes:
            - ./web:/usr/src/app
            - /usr/src/app/node_modules
            - /var/run/docker.sock:/var/run/docker.sock
            - ./docker-compose.yml:/usr/src/app/docker-compose.yml:ro
        networks:
            - web
        depends_on:
            - db
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.web.rule=Host(`uorocketry.ca`) || HostRegexp(`{subdomain:.+}\\.local`)"

            - "traefik.http.routers.web.entrypoints=web"
            - "traefik.http.routers.web.service=web"
            - "traefik.http.routers.web.priority=100"
            - "traefik.http.services.web.loadbalancer.server.port=3000"

    tiles:
        build:
            context: ./tile_provider
            dockerfile: Dockerfile
        volumes:
            - ./tile_provider/tiles_data:/var/lib/tiles:rw
        networks:
            - web
        ports:
            - "6565:6565"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.tiles.rule=Host(`tiles.uorocketry.ca`)"
            - "traefik.http.routers.tiles.entrypoints=web"
            - "traefik.http.routers.tiles.priority=100"
            - "traefik.http.services.tiles.loadbalancer.server.port=6565"

    heartbeat:
        image: archlinux:latest
        networks:
            - web
        volumes:
            - ./heartbeat:/app
        working_dir: /app
        command: [ "/app/heartbeat", "--libsql-url", "http://db:8080" ]
        restart: unless-stopped
        depends_on:
            - db
        labels:
            - "traefik.enable=false"
    telemetry-ingestor:
        image: archlinux:latest
        networks:
            - web
        volumes:
            - ./target/debug:/app/bin:ro
        working_dir: /app
        command: [ "/app/bin/telemetry-ingestor", "--libsql-url", "http://db:8080", "--gateway-connection-string", "tcpout:192.168.8.178:5656" ]
        restart: unless-stopped
        depends_on:
            - db
        labels:
            - "traefik.enable=false"

    command-dispatcher:
        # build:
        #     context: .
        #     dockerfile: utils/docker/Dockerfile.rust-service
        #     args:
        #         CRATE: command-dispatcher
        image: archlinux:latest
        volumes:
            - ./target/debug:/app/bin:ro
        working_dir: /app
        networks:
            - web
        # command: [ "/app/bin/command-dispatcher", "--libsql-url", "http://db:8080", "--gateway-connection-string", "tcpout:sergw:5656" ]
        command: [ "/app/bin/command-dispatcher", "--libsql-url", "http://db:8080", "--gateway-connection-string", "tcpout:192.168.8.178:5656" ]
        restart: unless-stopped
        depends_on:
            - db
        labels:
            - "traefik.enable=false"
    # sergw:
    #     image: archlinux:latest
    #     networks:
    #         - web
    #     volumes:
    #         - ./sergw:/app
    #     working_dir: /app
    #     devices:
    #         - /dev/ttyUSB0:/dev/ttyUSB0:rwm
    #     ports:
    #         - "5656:5656"
    #     restart: unless-stopped
    #     labels:
    #         - "traefik.enable=false"
    #     command: [ "/app/sergw", "listen", "--serial", "/dev/ttyUSB0", "--baud", "57600", "--verbose", "--host", "0.0.0.0:5656" ]

networks:
    web:
        driver: bridge
