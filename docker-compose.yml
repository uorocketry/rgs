name: rgs

services:
    traefik:
        image: traefik:v3.4
        networks:
            - web
        command:
            - "--api.insecure=true"
            - "--providers.docker=true"
            - "--entrypoints.web.address=:80"
            - "--log.level=INFO"
        ports:
            - "80:80"
            - "8080:8080"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.deny-all.rule=HostRegexp(`{host:.+}`)"
            - "traefik.http.routers.deny-all.entrypoints=web"
            - "traefik.http.routers.deny-all.priority=1"
            - "traefik.http.routers.deny-all.service=noop@internal"

    db:
        image: ghcr.io/tursodatabase/libsql-server:latest
        environment:
            SQLD_NODE: standalone
        volumes:
            - ./db/data:/var/lib/sqld
        networks:
            - web
        ports:
            - "5001:8080"
        labels:
            - "traefik.enable=false"

    migration:
        image: docker.io/oven/bun:1
        networks:
            - web
        volumes:
            - ./db:/app
        working_dir: /app
        command: [ "sh", "-c", "bun install && bun index.ts" ]
        environment:
            DATABASE_URL: http://db:8080
        depends_on:
            - db
        labels:
            - "traefik.enable=false"

    # Web dashboard running behind Traefik
    web:
        build:
            context: ./web
            dockerfile: Dockerfile.dev
        environment:
            - NODE_ENV=development
            - PORT=3000
            - WEB_SERVER_PORT=3000
            - DB_URL=http://db:8080
            - VITE_ALLOWED_HOSTS=uorocketry.ca,localhost,127.0.0.1
            - SVELTEKIT_ALLOWED_HOSTS=uorocketry.ca,localhost,127.0.0.1
            - ALLOWED_SUBNETS=192.168.8.0/24,127.0.0.1/32
            - PROTECTED_PATH_PREFIXES=/services/api
        volumes:
            - ./web:/usr/src/app
            - /usr/src/app/node_modules
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - web
        depends_on:
            - db
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.web.rule=Host(`uorocketry.ca`)"
            - "traefik.http.routers.web.entrypoints=web"
            - "traefik.http.routers.web.service=web"
            - "traefik.http.routers.web.priority=100"
            - "traefik.http.services.web.loadbalancer.server.port=3000"
            - "traefik.http.middlewares.protected-subnet.ipallowlist.sourcerange=192.168.8.0/24,127.0.0.1/32"
            - "traefik.http.routers.web-protected.rule=Host(`uorocketry.ca`) && (PathPrefix(`/services/api`))"
            - "traefik.http.routers.web-protected.entrypoints=web"
            - "traefik.http.routers.web-protected.priority=150"
            - "traefik.http.routers.web-protected.service=web"
            - "traefik.http.routers.web-protected.middlewares=protected-subnet"

    tile_provider:
        build:
            context: ./tile_provider
            dockerfile: Dockerfile
        volumes:
            - ./tile_provider/tiles_data:/var/lib/tile_provider:rw
        networks:
            - web
        ports:
            - "6565:6565"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.tile_provider.rule=Host(`tiles.uorocketry.ca`)"
            - "traefik.http.routers.tile_provider.entrypoints=web"
            - "traefik.http.routers.tile_provider.priority=100"
            - "traefik.http.services.tile_provider.loadbalancer.server.port=6565"

    heartbeat:
        image: golang:bookworm
        networks:
            - web
        volumes:
            - ./heartbeat:/app
        working_dir: /app
        command: [ "go", "run", ".", "--libsql-url", "http://db:8080" ]
        restart: unless-stopped
        depends_on:
            - db
        labels:
            - "traefik.enable=false"

    telemetry-ingestor:
        build:
            context: .
            dockerfile: utils/docker/Dockerfile.rust-service
            args:
                CRATE: telemetry-ingestor
        networks:
            - web
        command: [ "/app/bin/telemetry-ingestor", "--libsql-url", "http://db:8080", "--gateway-connection-string", "tcpout:sergw:5656" ]
        restart: unless-stopped
        depends_on:
            - db
        labels:
            - "traefik.enable=false"

    command-dispatcher:
        build:
            context: .
            dockerfile: utils/docker/Dockerfile.rust-service
            args:
                CRATE: command-dispatcher
        networks:
            - web
        command: [ "/app/bin/command-dispatcher", "--libsql-url", "http://db:8080", "--gateway-connection-string", "tcpout:sergw:5656" ]
        restart: unless-stopped
        depends_on:
            - db
        labels:
            - "traefik.enable=false"

    sergw:
        image: golang:bookworm
        networks:
            - web
        volumes:
            - ./sergw:/app
        working_dir: /app
        devices:
            - /dev/ttyUSB0:/dev/ttyUSB0:rwm
        ports:
            - "5656:5656"
        restart: unless-stopped
        labels:
            - "traefik.enable=false"
        command: [ "go", "run", ".", "listen", "--serial", "/dev/ttyUSB0", "--baud", "57600", "--verbose", "--host", "0.0.0.0:5656" ]

networks:
    web:
        driver: bridge
