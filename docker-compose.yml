name: rgs

services:
    traefik:
        image: traefik:v3.4
        networks:
            - web
        command:
        - "--api.insecure=true"
        - "--providers.docker=true"
        - "--entrypoints.web.address=:80"
        - "--log.level=INFO"
        ports:
        - "80:80"
        - "8080:8080"
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock

   

    db:
        image: ghcr.io/tursodatabase/libsql-server:latest
        environment:
            SQLD_NODE: standalone
        volumes:
            - ./db/data:/var/lib/sqld
        networks:
            - web
        labels:
        - "traefik.enable=true"
        - "traefik.http.routers.db.rule=Host(`db.localhost`)"
        - "traefik.http.services.db.loadbalancer.server.port=8080"

    migration:
        image: docker.io/oven/bun:1
        networks:
            - web
        volumes:
            - ./db:/app
        working_dir: /app
        command: [ "sh", "-c", "bun install && bun index.ts" ]
        environment:
            DATABASE_URL: http://db:8080
        depends_on:
            - db
        labels:
            - "traefik.enable=false"

    # Web dashboard running behind Traefik
    web:
        build:
            context: ./web
            dockerfile: Dockerfile.dev
        environment:
            - NODE_ENV=development
            - PORT=3000
            - WEB_SERVER_PORT=3000
            - DB_URL=http://db:8080
        volumes:
            - ./web:/usr/src/app
            - /usr/src/app/node_modules
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - web
        depends_on:
            - db
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.web.rule=Host(`rgs.localhost`)"
            - "traefik.http.routers.web.entrypoints=web"
            - "traefik.http.services.web.loadbalancer.server.port=3000"

    tile_provider:
        build:
            context: ./tile_provider
            dockerfile: Dockerfile
        volumes:
            - ./tile_provider/tiles_data:/var/lib/tile_provider:rw
        networks:
            - web
        labels:
            - "traefik.enable=true"
            # Dedicated host for tile provider (avoids /bun conflicts)
            - "traefik.http.routers.tile_provider_host.rule=Host(`tiles.rgs.localhost`)"
            - "traefik.http.routers.tile_provider_host.entrypoints=web"
            - "traefik.http.routers.tile_provider_host.priority=3000"
            # Exact path /tiles/downloader -> rewrite to /
            - "traefik.http.routers.tile_provider_home.rule=Host(`rgs.localhost`) && Path(`/tiles/downloader`)"
            - "traefik.http.routers.tile_provider_home.entrypoints=web"
            - "traefik.http.routers.tile_provider_home.priority=2000"
            - "traefik.http.routers.tile_provider_home.middlewares=tile_provider-home-rewrite"
            - "traefik.http.middlewares.tile_provider-home-rewrite.replacepath.path=/"
            # Static assets served by Bun at /bun/* should be routed to tile_provider
            - "traefik.http.routers.tile_provider_assets.rule=Host(`rgs.localhost`) && PathPrefix(`/bun/`)"
            - "traefik.http.routers.tile_provider_assets.entrypoints=web"
            - "traefik.http.routers.tile_provider_assets.priority=1500"
            # All other /tiles/* go straight to the service unchanged
            - "traefik.http.routers.tile_provider_tiles.rule=Host(`rgs.localhost`) && PathPrefix(`/tiles/`)"
            - "traefik.http.routers.tile_provider_tiles.entrypoints=web"
            - "traefik.http.routers.tile_provider_tiles.priority=1000"
            - "traefik.http.services.tile_provider.loadbalancer.server.port=6565"

    heartbeat:
        image: rust
        networks:
            - web
        volumes:
            - ./target/debug/heartbeat:/app/heartbeat:ro
        command: ["/app/heartbeat", "--libsql-url", "http://db:8080"]
        restart: unless-stopped
        depends_on:
            - db
        labels:
            - "traefik.enable=false"

    telemetry-ingestor:
        build:
            context: .
            dockerfile: utils/docker/Dockerfile.rust-service
            args:
                CRATE: telemetry-ingestor
        networks:
            - web
        command: ["/app/bin/telemetry-ingestor", "--libsql-url", "http://db:8080", "--gateway-connection-string", "tcpout:sergw:5656"]
        restart: unless-stopped
        depends_on:
            - db
        labels:
            - "traefik.enable=false"

    command-dispatcher:
        build:
            context: .
            dockerfile: utils/docker/Dockerfile.rust-service
            args:
                CRATE: command-dispatcher
        networks:
            - web
        command: ["/app/bin/command-dispatcher", "--libsql-url", "http://db:8080", "--gateway-connection-string", "tcpout:sergw:5656"]
        restart: unless-stopped
        depends_on:
            - db
        labels:
            - "traefik.enable=false"

networks:
  web:
    driver: bridge