<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="99340105"><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (85,260 samples, 0.09%)</title><rect x="0.0000%" y="453" width="0.0858%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="85260"/><text x="0.2500%" y="463.50"></text></g><g><title>anon.51ce53244a04527b737b6c57d3d0d24e.12.llvm.16687640532477555393 (85,260 samples, 0.09%)</title><rect x="0.0000%" y="437" width="0.0858%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="85260"/><text x="0.2500%" y="447.50"></text></g><g><title>__GI___libc_write (85,260 samples, 0.09%)</title><rect x="0.0000%" y="421" width="0.0858%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="85260"/><text x="0.2500%" y="431.50"></text></g><g><title>__GI___libc_write (85,260 samples, 0.09%)</title><rect x="0.0000%" y="405" width="0.0858%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="85260"/><text x="0.2500%" y="415.50"></text></g><g><title>[unknown] (85,260 samples, 0.09%)</title><rect x="0.0000%" y="389" width="0.0858%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="85260"/><text x="0.2500%" y="399.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::set_name (463,934 samples, 0.47%)</title><rect x="0.0921%" y="389" width="0.4670%" height="15" fill="rgb(232,128,0)" fg:x="91516" fg:w="463934"/><text x="0.3421%" y="399.50"></text></g><g><title>__pthread_setname_np (463,934 samples, 0.47%)</title><rect x="0.0921%" y="373" width="0.4670%" height="15" fill="rgb(207,160,47)" fg:x="91516" fg:w="463934"/><text x="0.3421%" y="383.50"></text></g><g><title>__GI___prctl (463,934 samples, 0.47%)</title><rect x="0.0921%" y="357" width="0.4670%" height="15" fill="rgb(228,23,34)" fg:x="91516" fg:w="463934"/><text x="0.3421%" y="367.50"></text></g><g><title>[unknown] (463,934 samples, 0.47%)</title><rect x="0.0921%" y="341" width="0.4670%" height="15" fill="rgb(218,30,26)" fg:x="91516" fg:w="463934"/><text x="0.3421%" y="351.50"></text></g><g><title>[unknown] (463,934 samples, 0.47%)</title><rect x="0.0921%" y="325" width="0.4670%" height="15" fill="rgb(220,122,19)" fg:x="91516" fg:w="463934"/><text x="0.3421%" y="335.50"></text></g><g><title>[unknown] (463,934 samples, 0.47%)</title><rect x="0.0921%" y="309" width="0.4670%" height="15" fill="rgb(250,228,42)" fg:x="91516" fg:w="463934"/><text x="0.3421%" y="319.50"></text></g><g><title>[unknown] (463,934 samples, 0.47%)</title><rect x="0.0921%" y="293" width="0.4670%" height="15" fill="rgb(240,193,28)" fg:x="91516" fg:w="463934"/><text x="0.3421%" y="303.50"></text></g><g><title>[unknown] (463,934 samples, 0.47%)</title><rect x="0.0921%" y="277" width="0.4670%" height="15" fill="rgb(216,20,37)" fg:x="91516" fg:w="463934"/><text x="0.3421%" y="287.50"></text></g><g><title>[unknown] (463,934 samples, 0.47%)</title><rect x="0.0921%" y="261" width="0.4670%" height="15" fill="rgb(206,188,39)" fg:x="91516" fg:w="463934"/><text x="0.3421%" y="271.50"></text></g><g><title>[unknown] (675,487 samples, 0.68%)</title><rect x="4.5837%" y="309" width="0.6800%" height="15" fill="rgb(217,207,13)" fg:x="4553485" fg:w="675487"/><text x="4.8337%" y="319.50"></text></g><g><title>[unknown] (407,442 samples, 0.41%)</title><rect x="4.8536%" y="293" width="0.4101%" height="15" fill="rgb(231,73,38)" fg:x="4821530" fg:w="407442"/><text x="5.1036%" y="303.50"></text></g><g><title>[unknown] (407,442 samples, 0.41%)</title><rect x="4.8536%" y="277" width="0.4101%" height="15" fill="rgb(225,20,46)" fg:x="4821530" fg:w="407442"/><text x="5.1036%" y="287.50"></text></g><g><title>[unknown] (407,442 samples, 0.41%)</title><rect x="4.8536%" y="261" width="0.4101%" height="15" fill="rgb(210,31,41)" fg:x="4821530" fg:w="407442"/><text x="5.1036%" y="271.50"></text></g><g><title>[unknown] (277,346 samples, 0.28%)</title><rect x="4.9845%" y="245" width="0.2792%" height="15" fill="rgb(221,200,47)" fg:x="4951626" fg:w="277346"/><text x="5.2345%" y="255.50"></text></g><g><title>[unknown] (277,346 samples, 0.28%)</title><rect x="4.9845%" y="229" width="0.2792%" height="15" fill="rgb(226,26,5)" fg:x="4951626" fg:w="277346"/><text x="5.2345%" y="239.50"></text></g><g><title>_ZN10serialport5posix4poll7wait_fd17ha63974cc6b5edda3E.llvm.17108613689077452812 (3,149,887 samples, 3.17%)</title><rect x="2.0929%" y="357" width="3.1708%" height="15" fill="rgb(249,33,26)" fg:x="2079088" fg:w="3149887"/><text x="2.3429%" y="367.50">_ZN..</text></g><g><title>nix::poll::ppoll (2,355,002 samples, 2.37%)</title><rect x="2.8931%" y="341" width="2.3706%" height="15" fill="rgb(235,183,28)" fg:x="2873973" fg:w="2355002"/><text x="3.1431%" y="351.50">ni..</text></g><g><title>__ppoll (1,868,858 samples, 1.88%)</title><rect x="3.3824%" y="325" width="1.8813%" height="15" fill="rgb(221,5,38)" fg:x="3360117" fg:w="1868858"/><text x="3.6324%" y="335.50">_..</text></g><g><title>[unknown] (125,003 samples, 0.13%)</title><rect x="5.2812%" y="309" width="0.1258%" height="15" fill="rgb(247,18,42)" fg:x="5246376" fg:w="125003"/><text x="5.5312%" y="319.50"></text></g><g><title>[unknown] (125,003 samples, 0.13%)</title><rect x="5.2812%" y="293" width="0.1258%" height="15" fill="rgb(241,131,45)" fg:x="5246376" fg:w="125003"/><text x="5.5312%" y="303.50"></text></g><g><title>[unknown] (122,693 samples, 0.12%)</title><rect x="5.2836%" y="277" width="0.1235%" height="15" fill="rgb(249,31,29)" fg:x="5248686" fg:w="122693"/><text x="5.5336%" y="287.50"></text></g><g><title>[unknown] (122,693 samples, 0.12%)</title><rect x="5.2836%" y="261" width="0.1235%" height="15" fill="rgb(225,111,53)" fg:x="5248686" fg:w="122693"/><text x="5.5336%" y="271.50"></text></g><g><title>[unknown] (122,693 samples, 0.12%)</title><rect x="5.2836%" y="245" width="0.1235%" height="15" fill="rgb(238,160,17)" fg:x="5248686" fg:w="122693"/><text x="5.5336%" y="255.50"></text></g><g><title>&lt;serialport::posix::tty::TTYPort as std::io::Read&gt;::read (4,239,073 samples, 4.27%)</title><rect x="1.4228%" y="373" width="4.2672%" height="15" fill="rgb(214,148,48)" fg:x="1413410" fg:w="4239073"/><text x="1.6728%" y="383.50">&lt;seri..</text></g><g><title>nix::unistd::read (423,508 samples, 0.43%)</title><rect x="5.2637%" y="357" width="0.4263%" height="15" fill="rgb(232,36,49)" fg:x="5228975" fg:w="423508"/><text x="5.5137%" y="367.50"></text></g><g><title>__GI___libc_read (419,958 samples, 0.42%)</title><rect x="5.2673%" y="341" width="0.4227%" height="15" fill="rgb(209,103,24)" fg:x="5232525" fg:w="419958"/><text x="5.5173%" y="351.50"></text></g><g><title>__GI___libc_read (406,107 samples, 0.41%)</title><rect x="5.2812%" y="325" width="0.4088%" height="15" fill="rgb(229,88,8)" fg:x="5246376" fg:w="406107"/><text x="5.5312%" y="335.50"></text></g><g><title>__GI___pthread_enable_asynccancel (281,104 samples, 0.28%)</title><rect x="5.4071%" y="309" width="0.2830%" height="15" fill="rgb(213,181,19)" fg:x="5371379" fg:w="281104"/><text x="5.6571%" y="319.50"></text></g><g><title>__GI___libc_malloc (536,375 samples, 0.54%)</title><rect x="5.6900%" y="373" width="0.5399%" height="15" fill="rgb(254,191,54)" fg:x="5652483" fg:w="536375"/><text x="5.9400%" y="383.50"></text></g><g><title>tcache_get (185,136 samples, 0.19%)</title><rect x="6.0436%" y="357" width="0.1864%" height="15" fill="rgb(241,83,37)" fg:x="6003722" fg:w="185136"/><text x="6.2936%" y="367.50"></text></g><g><title>__rdl_alloc (547,281 samples, 0.55%)</title><rect x="6.2300%" y="373" width="0.5509%" height="15" fill="rgb(233,36,39)" fg:x="6188858" fg:w="547281"/><text x="6.4800%" y="383.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1,549,649 samples, 1.56%)</title><rect x="6.7809%" y="373" width="1.5599%" height="15" fill="rgb(226,3,54)" fg:x="6736139" fg:w="1549649"/><text x="7.0309%" y="383.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (1,174,662 samples, 1.18%)</title><rect x="7.1584%" y="357" width="1.1825%" height="15" fill="rgb(245,192,40)" fg:x="7111126" fg:w="1174662"/><text x="7.4084%" y="367.50"></text></g><g><title>__GI___libc_free (268,044 samples, 0.27%)</title><rect x="8.7548%" y="357" width="0.2698%" height="15" fill="rgb(238,167,29)" fg:x="8696988" fg:w="268044"/><text x="9.0048%" y="367.50"></text></g><g><title>_int_free (268,044 samples, 0.27%)</title><rect x="8.7548%" y="341" width="0.2698%" height="15" fill="rgb(232,182,51)" fg:x="8696988" fg:w="268044"/><text x="9.0048%" y="351.50"></text></g><g><title>_int_malloc (342,319 samples, 0.34%)</title><rect x="9.0246%" y="341" width="0.3446%" height="15" fill="rgb(231,60,39)" fg:x="8965032" fg:w="342319"/><text x="9.2746%" y="351.50"></text></g><g><title>__GI___libc_malloc (610,363 samples, 0.61%)</title><rect x="9.0246%" y="357" width="0.6144%" height="15" fill="rgb(208,69,12)" fg:x="8965032" fg:w="610363"/><text x="9.2746%" y="367.50"></text></g><g><title>arena_for_chunk (268,044 samples, 0.27%)</title><rect x="9.3692%" y="341" width="0.2698%" height="15" fill="rgb(235,93,37)" fg:x="9307351" fg:w="268044"/><text x="9.6192%" y="351.50"></text></g><g><title>arena_for_chunk (268,044 samples, 0.27%)</title><rect x="9.3692%" y="325" width="0.2698%" height="15" fill="rgb(213,116,39)" fg:x="9307351" fg:w="268044"/><text x="9.6192%" y="335.50"></text></g><g><title>heap_for_ptr (268,044 samples, 0.27%)</title><rect x="9.3692%" y="309" width="0.2698%" height="15" fill="rgb(222,207,29)" fg:x="9307351" fg:w="268044"/><text x="9.6192%" y="319.50"></text></g><g><title>core::slice::memchr::memrchr (268,044 samples, 0.27%)</title><rect x="11.4437%" y="277" width="0.2698%" height="15" fill="rgb(206,96,30)" fg:x="11368149" fg:w="268044"/><text x="11.6937%" y="287.50"></text></g><g><title>std::io::stdio::_print (4,531,843 samples, 4.56%)</title><rect x="9.6390%" y="357" width="4.5619%" height="15" fill="rgb(218,138,4)" fg:x="9575395" fg:w="4531843"/><text x="9.8890%" y="367.50">std::..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4,531,843 samples, 4.56%)</title><rect x="9.6390%" y="341" width="4.5619%" height="15" fill="rgb(250,191,14)" fg:x="9575395" fg:w="4531843"/><text x="9.8890%" y="351.50">&lt;&amp;std..</text></g><g><title>core::fmt::write (4,531,843 samples, 4.56%)</title><rect x="9.6390%" y="325" width="4.5619%" height="15" fill="rgb(239,60,40)" fg:x="9575395" fg:w="4531843"/><text x="9.8890%" y="335.50">core:..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2,957,385 samples, 2.98%)</title><rect x="11.2239%" y="309" width="2.9770%" height="15" fill="rgb(206,27,48)" fg:x="11149853" fg:w="2957385"/><text x="11.4739%" y="319.50">&lt;st..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2,858,975 samples, 2.88%)</title><rect x="11.3230%" y="293" width="2.8780%" height="15" fill="rgb(225,35,8)" fg:x="11248263" fg:w="2858975"/><text x="11.5730%" y="303.50">&lt;s..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (2,471,045 samples, 2.49%)</title><rect x="11.7135%" y="277" width="2.4875%" height="15" fill="rgb(250,213,24)" fg:x="11636193" fg:w="2471045"/><text x="11.9635%" y="287.50">st..</text></g><g><title>__GI___libc_write (2,471,045 samples, 2.49%)</title><rect x="11.7135%" y="261" width="2.4875%" height="15" fill="rgb(247,123,22)" fg:x="11636193" fg:w="2471045"/><text x="11.9635%" y="271.50">__..</text></g><g><title>__GI___libc_write (2,471,045 samples, 2.49%)</title><rect x="11.7135%" y="245" width="2.4875%" height="15" fill="rgb(231,138,38)" fg:x="11636193" fg:w="2471045"/><text x="11.9635%" y="255.50">__..</text></g><g><title>[unknown] (616,449 samples, 0.62%)</title><rect x="13.5804%" y="229" width="0.6205%" height="15" fill="rgb(231,145,46)" fg:x="13490789" fg:w="616449"/><text x="13.8304%" y="239.50"></text></g><g><title>[unknown] (616,449 samples, 0.62%)</title><rect x="13.5804%" y="213" width="0.6205%" height="15" fill="rgb(251,118,11)" fg:x="13490789" fg:w="616449"/><text x="13.8304%" y="223.50"></text></g><g><title>[unknown] (616,449 samples, 0.62%)</title><rect x="13.5804%" y="197" width="0.6205%" height="15" fill="rgb(217,147,25)" fg:x="13490789" fg:w="616449"/><text x="13.8304%" y="207.50"></text></g><g><title>[unknown] (616,449 samples, 0.62%)</title><rect x="13.5804%" y="181" width="0.6205%" height="15" fill="rgb(247,81,37)" fg:x="13490789" fg:w="616449"/><text x="13.8304%" y="191.50"></text></g><g><title>[unknown] (616,449 samples, 0.62%)</title><rect x="13.5804%" y="165" width="0.6205%" height="15" fill="rgb(209,12,38)" fg:x="13490789" fg:w="616449"/><text x="13.8304%" y="175.50"></text></g><g><title>[unknown] (616,449 samples, 0.62%)</title><rect x="13.5804%" y="149" width="0.6205%" height="15" fill="rgb(227,1,9)" fg:x="13490789" fg:w="616449"/><text x="13.8304%" y="159.50"></text></g><g><title>[unknown] (486,353 samples, 0.49%)</title><rect x="13.7114%" y="133" width="0.4896%" height="15" fill="rgb(248,47,43)" fg:x="13620885" fg:w="486353"/><text x="13.9614%" y="143.50"></text></g><g><title>[unknown] (486,353 samples, 0.49%)</title><rect x="13.7114%" y="117" width="0.4896%" height="15" fill="rgb(221,10,30)" fg:x="13620885" fg:w="486353"/><text x="13.9614%" y="127.50"></text></g><g><title>[unknown] (381,640 samples, 0.38%)</title><rect x="13.8168%" y="101" width="0.3842%" height="15" fill="rgb(210,229,1)" fg:x="13725598" fg:w="381640"/><text x="14.0668%" y="111.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (4,819,532 samples, 4.85%)</title><rect x="15.6091%" y="293" width="4.8515%" height="15" fill="rgb(222,148,37)" fg:x="15506141" fg:w="4819532"/><text x="15.8591%" y="303.50">parkin..</text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (11,271,790 samples, 11.35%)</title><rect x="14.8549%" y="309" width="11.3467%" height="15" fill="rgb(234,67,33)" fg:x="14756829" fg:w="11271790"/><text x="15.1049%" y="319.50">parking_lot::cond..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (5,702,946 samples, 5.74%)</title><rect x="20.4607%" y="293" width="5.7408%" height="15" fill="rgb(247,98,35)" fg:x="20325673" fg:w="5702946"/><text x="20.7107%" y="303.50">std::sy..</text></g><g><title>__GI___clock_gettime (5,702,946 samples, 5.74%)</title><rect x="20.4607%" y="277" width="5.7408%" height="15" fill="rgb(247,138,52)" fg:x="20325673" fg:w="5702946"/><text x="20.7107%" y="287.50">__GI___..</text></g><g><title>[[vdso]] (3,611,370 samples, 3.64%)</title><rect x="22.5662%" y="261" width="3.6354%" height="15" fill="rgb(213,79,30)" fg:x="22417249" fg:w="3611370"/><text x="22.8162%" y="271.50">[[vd..</text></g><g><title>[unknown] (536,088 samples, 0.54%)</title><rect x="25.6619%" y="245" width="0.5396%" height="15" fill="rgb(246,177,23)" fg:x="25492531" fg:w="536088"/><text x="25.9119%" y="255.50"></text></g><g><title>[unknown] (536,088 samples, 0.54%)</title><rect x="25.6619%" y="229" width="0.5396%" height="15" fill="rgb(230,62,27)" fg:x="25492531" fg:w="536088"/><text x="25.9119%" y="239.50"></text></g><g><title>[unknown] (536,088 samples, 0.54%)</title><rect x="25.6619%" y="213" width="0.5396%" height="15" fill="rgb(216,154,8)" fg:x="25492531" fg:w="536088"/><text x="25.9119%" y="223.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (2,411,485 samples, 2.43%)</title><rect x="26.2015%" y="309" width="2.4275%" height="15" fill="rgb(244,35,45)" fg:x="26028619" fg:w="2411485"/><text x="26.4515%" y="319.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::push_remote_task (1,253,192 samples, 1.26%)</title><rect x="27.3675%" y="293" width="1.2615%" height="15" fill="rgb(251,115,12)" fg:x="27186912" fg:w="1253192"/><text x="27.6175%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (14,026,521 samples, 14.12%)</title><rect x="14.7801%" y="341" width="14.1197%" height="15" fill="rgb(240,54,50)" fg:x="14682554" fg:w="14026521"/><text x="15.0301%" y="351.50">tokio::runtime::sched..</text></g><g><title>tokio::runtime::context::with_scheduler (14,026,521 samples, 14.12%)</title><rect x="14.7801%" y="325" width="14.1197%" height="15" fill="rgb(233,84,52)" fg:x="14682554" fg:w="14026521"/><text x="15.0301%" y="335.50">tokio::runtime::conte..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (268,971 samples, 0.27%)</title><rect x="28.6290%" y="309" width="0.2708%" height="15" fill="rgb(207,117,47)" fg:x="28440104" fg:w="268971"/><text x="28.8790%" y="319.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (15,149,118 samples, 15.25%)</title><rect x="14.2009%" y="357" width="15.2498%" height="15" fill="rgb(249,43,39)" fg:x="14107238" fg:w="15149118"/><text x="14.4509%" y="367.50">tokio::runtime::task::w..</text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (547,281 samples, 0.55%)</title><rect x="28.8998%" y="341" width="0.5509%" height="15" fill="rgb(209,38,44)" fg:x="28709075" fg:w="547281"/><text x="29.1498%" y="351.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (281,104 samples, 0.28%)</title><rect x="29.4507%" y="357" width="0.2830%" height="15" fill="rgb(236,212,23)" fg:x="29256356" fg:w="281104"/><text x="29.7007%" y="367.50"></text></g><g><title>hydra_gateway::SharedState::broadcast (21,801,950 samples, 21.95%)</title><rect x="8.3408%" y="373" width="21.9468%" height="15" fill="rgb(242,79,21)" fg:x="8285788" fg:w="21801950"/><text x="8.5908%" y="383.50">hydra_gateway::SharedState::broadca..</text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (550,278 samples, 0.55%)</title><rect x="29.7337%" y="357" width="0.5539%" height="15" fill="rgb(211,96,35)" fg:x="29537460" fg:w="550278"/><text x="29.9837%" y="367.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::fmt::Display&gt;::fmt (978,637 samples, 0.99%)</title><rect x="40.3757%" y="325" width="0.9851%" height="15" fill="rgb(253,215,40)" fg:x="40109275" fg:w="978637"/><text x="40.6257%" y="335.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (859,528 samples, 0.87%)</title><rect x="41.6307%" y="293" width="0.8652%" height="15" fill="rgb(211,81,21)" fg:x="41355956" fg:w="859528"/><text x="41.8807%" y="303.50"></text></g><g><title>__GI___libc_write (859,528 samples, 0.87%)</title><rect x="41.6307%" y="277" width="0.8652%" height="15" fill="rgb(208,190,38)" fg:x="41355956" fg:w="859528"/><text x="41.8807%" y="287.50"></text></g><g><title>__GI___libc_write (859,528 samples, 0.87%)</title><rect x="41.6307%" y="261" width="0.8652%" height="15" fill="rgb(235,213,38)" fg:x="41355956" fg:w="859528"/><text x="41.8807%" y="271.50"></text></g><g><title>[unknown] (859,528 samples, 0.87%)</title><rect x="41.6307%" y="245" width="0.8652%" height="15" fill="rgb(237,122,38)" fg:x="41355956" fg:w="859528"/><text x="41.8807%" y="255.50"></text></g><g><title>[unknown] (859,528 samples, 0.87%)</title><rect x="41.6307%" y="229" width="0.8652%" height="15" fill="rgb(244,218,35)" fg:x="41355956" fg:w="859528"/><text x="41.8807%" y="239.50"></text></g><g><title>[unknown] (859,528 samples, 0.87%)</title><rect x="41.6307%" y="213" width="0.8652%" height="15" fill="rgb(240,68,47)" fg:x="41355956" fg:w="859528"/><text x="41.8807%" y="223.50"></text></g><g><title>[unknown] (859,528 samples, 0.87%)</title><rect x="41.6307%" y="197" width="0.8652%" height="15" fill="rgb(210,16,53)" fg:x="41355956" fg:w="859528"/><text x="41.8807%" y="207.50"></text></g><g><title>[unknown] (859,528 samples, 0.87%)</title><rect x="41.6307%" y="181" width="0.8652%" height="15" fill="rgb(235,124,12)" fg:x="41355956" fg:w="859528"/><text x="41.8807%" y="191.50"></text></g><g><title>[unknown] (859,528 samples, 0.87%)</title><rect x="41.6307%" y="165" width="0.8652%" height="15" fill="rgb(224,169,11)" fg:x="41355956" fg:w="859528"/><text x="41.8807%" y="175.50"></text></g><g><title>[unknown] (859,528 samples, 0.87%)</title><rect x="41.6307%" y="149" width="0.8652%" height="15" fill="rgb(250,166,2)" fg:x="41355956" fg:w="859528"/><text x="41.8807%" y="159.50"></text></g><g><title>[unknown] (859,528 samples, 0.87%)</title><rect x="41.6307%" y="133" width="0.8652%" height="15" fill="rgb(242,216,29)" fg:x="41355956" fg:w="859528"/><text x="41.8807%" y="143.50"></text></g><g><title>[unknown] (859,528 samples, 0.87%)</title><rect x="41.6307%" y="117" width="0.8652%" height="15" fill="rgb(230,116,27)" fg:x="41355956" fg:w="859528"/><text x="41.8807%" y="127.50"></text></g><g><title>core::slice::memchr::memrchr (2,032,524 samples, 2.05%)</title><rect x="42.4959%" y="293" width="2.0460%" height="15" fill="rgb(228,99,48)" fg:x="42215484" fg:w="2032524"/><text x="42.7459%" y="303.50">c..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3,492,101 samples, 3.52%)</title><rect x="41.3609%" y="325" width="3.5153%" height="15" fill="rgb(253,11,6)" fg:x="41087912" fg:w="3492101"/><text x="41.6109%" y="335.50">&lt;st..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3,492,101 samples, 3.52%)</title><rect x="41.3609%" y="309" width="3.5153%" height="15" fill="rgb(247,143,39)" fg:x="41087912" fg:w="3492101"/><text x="41.6109%" y="319.50">&lt;st..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (332,005 samples, 0.33%)</title><rect x="44.5419%" y="293" width="0.3342%" height="15" fill="rgb(236,97,10)" fg:x="44248008" fg:w="332005"/><text x="44.7919%" y="303.50"></text></g><g><title>__GI___libc_write (332,005 samples, 0.33%)</title><rect x="44.5419%" y="277" width="0.3342%" height="15" fill="rgb(233,208,19)" fg:x="44248008" fg:w="332005"/><text x="44.7919%" y="287.50"></text></g><g><title>__GI___libc_write (332,005 samples, 0.33%)</title><rect x="44.5419%" y="261" width="0.3342%" height="15" fill="rgb(216,164,2)" fg:x="44248008" fg:w="332005"/><text x="44.7919%" y="271.50"></text></g><g><title>[unknown] (332,005 samples, 0.33%)</title><rect x="44.5419%" y="245" width="0.3342%" height="15" fill="rgb(220,129,5)" fg:x="44248008" fg:w="332005"/><text x="44.7919%" y="255.50"></text></g><g><title>[unknown] (332,005 samples, 0.33%)</title><rect x="44.5419%" y="229" width="0.3342%" height="15" fill="rgb(242,17,10)" fg:x="44248008" fg:w="332005"/><text x="44.7919%" y="239.50"></text></g><g><title>[unknown] (332,005 samples, 0.33%)</title><rect x="44.5419%" y="213" width="0.3342%" height="15" fill="rgb(242,107,0)" fg:x="44248008" fg:w="332005"/><text x="44.7919%" y="223.50"></text></g><g><title>[unknown] (63,961 samples, 0.06%)</title><rect x="44.8118%" y="197" width="0.0644%" height="15" fill="rgb(251,28,31)" fg:x="44516052" fg:w="63961"/><text x="45.0618%" y="207.50"></text></g><g><title>[unknown] (63,961 samples, 0.06%)</title><rect x="44.8118%" y="181" width="0.0644%" height="15" fill="rgb(233,223,10)" fg:x="44516052" fg:w="63961"/><text x="45.0618%" y="191.50"></text></g><g><title>[unknown] (63,961 samples, 0.06%)</title><rect x="44.8118%" y="165" width="0.0644%" height="15" fill="rgb(215,21,27)" fg:x="44516052" fg:w="63961"/><text x="45.0618%" y="175.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (72,430 samples, 0.07%)</title><rect x="44.8761%" y="325" width="0.0729%" height="15" fill="rgb(232,23,21)" fg:x="44580013" fg:w="72430"/><text x="45.1261%" y="335.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (14,714,105 samples, 14.81%)</title><rect x="31.0096%" y="357" width="14.8118%" height="15" fill="rgb(244,5,23)" fg:x="30804948" fg:w="14714105"/><text x="31.2596%" y="367.50">&lt;&amp;std::io::stdio::Stdou..</text></g><g><title>core::fmt::write (10,025,091 samples, 10.09%)</title><rect x="35.7297%" y="341" width="10.0917%" height="15" fill="rgb(226,81,46)" fg:x="35493962" fg:w="10025091"/><text x="35.9797%" y="351.50">core::fmt::write</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for usize&gt;::fmt (866,610 samples, 0.87%)</title><rect x="44.9491%" y="325" width="0.8724%" height="15" fill="rgb(247,70,30)" fg:x="44652443" fg:w="866610"/><text x="45.1991%" y="335.50"></text></g><g><title>core::fmt::Formatter::pad_integral (866,610 samples, 0.87%)</title><rect x="44.9491%" y="309" width="0.8724%" height="15" fill="rgb(212,68,19)" fg:x="44652443" fg:w="866610"/><text x="45.1991%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (45,708,641 samples, 46.01%)</title><rect x="0.0921%" y="405" width="46.0123%" height="15" fill="rgb(240,187,13)" fg:x="91516" fg:w="45708641"/><text x="0.3421%" y="415.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (45,244,707 samples, 45.55%)</title><rect x="0.5591%" y="389" width="45.5453%" height="15" fill="rgb(223,113,26)" fg:x="555450" fg:w="45244707"/><text x="0.8091%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>std::io::stdio::_print (15,712,419 samples, 15.82%)</title><rect x="30.2876%" y="373" width="15.8168%" height="15" fill="rgb(206,192,2)" fg:x="30087738" fg:w="15712419"/><text x="30.5376%" y="383.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to_buffer_if_capture_used (281,104 samples, 0.28%)</title><rect x="45.8214%" y="357" width="0.2830%" height="15" fill="rgb(241,108,4)" fg:x="45519053" fg:w="281104"/><text x="46.0714%" y="367.50"></text></g><g><title>__GI___pthread_attr_destroy (108,022 samples, 0.11%)</title><rect x="46.1044%" y="389" width="0.1087%" height="15" fill="rgb(247,173,49)" fg:x="45800157" fg:w="108022"/><text x="46.3544%" y="399.50"></text></g><g><title>__GI___libc_free (108,022 samples, 0.11%)</title><rect x="46.1044%" y="373" width="0.1087%" height="15" fill="rgb(224,114,35)" fg:x="45800157" fg:w="108022"/><text x="46.3544%" y="383.50"></text></g><g><title>_int_free (108,022 samples, 0.11%)</title><rect x="46.1044%" y="357" width="0.1087%" height="15" fill="rgb(245,159,27)" fg:x="45800157" fg:w="108022"/><text x="46.3544%" y="367.50"></text></g><g><title>tcache_put (108,022 samples, 0.11%)</title><rect x="46.1044%" y="341" width="0.1087%" height="15" fill="rgb(245,172,44)" fg:x="45800157" fg:w="108022"/><text x="46.3544%" y="351.50"></text></g><g><title>__GI___libc_malloc (66,036 samples, 0.07%)</title><rect x="46.2179%" y="373" width="0.0665%" height="15" fill="rgb(236,23,11)" fg:x="45912930" fg:w="66036"/><text x="46.4679%" y="383.50"></text></g><g><title>tcache_init (66,036 samples, 0.07%)</title><rect x="46.2179%" y="357" width="0.0665%" height="15" fill="rgb(205,117,38)" fg:x="45912930" fg:w="66036"/><text x="46.4679%" y="367.50"></text></g><g><title>tcache_init (66,036 samples, 0.07%)</title><rect x="46.2179%" y="341" width="0.0665%" height="15" fill="rgb(237,72,25)" fg:x="45912930" fg:w="66036"/><text x="46.4679%" y="351.50"></text></g><g><title>arena_get2 (49,470 samples, 0.05%)</title><rect x="46.2346%" y="325" width="0.0498%" height="15" fill="rgb(244,70,9)" fg:x="45929496" fg:w="49470"/><text x="46.4846%" y="335.50"></text></g><g><title>arena_get2 (49,470 samples, 0.05%)</title><rect x="46.2346%" y="309" width="0.0498%" height="15" fill="rgb(217,125,39)" fg:x="45929496" fg:w="49470"/><text x="46.4846%" y="319.50"></text></g><g><title>_int_new_arena (46,223 samples, 0.05%)</title><rect x="46.2379%" y="293" width="0.0465%" height="15" fill="rgb(235,36,10)" fg:x="45932743" fg:w="46223"/><text x="46.4879%" y="303.50"></text></g><g><title>new_heap (46,223 samples, 0.05%)</title><rect x="46.2379%" y="277" width="0.0465%" height="15" fill="rgb(251,123,47)" fg:x="45932743" fg:w="46223"/><text x="46.4879%" y="287.50"></text></g><g><title>alloc_new_heap (46,223 samples, 0.05%)</title><rect x="46.2379%" y="261" width="0.0465%" height="15" fill="rgb(221,13,13)" fg:x="45932743" fg:w="46223"/><text x="46.4879%" y="271.50"></text></g><g><title>__GI___mprotect (30,679 samples, 0.03%)</title><rect x="46.2535%" y="245" width="0.0309%" height="15" fill="rgb(238,131,9)" fg:x="45948287" fg:w="30679"/><text x="46.5035%" y="255.50"></text></g><g><title>[unknown] (30,679 samples, 0.03%)</title><rect x="46.2535%" y="229" width="0.0309%" height="15" fill="rgb(211,50,8)" fg:x="45948287" fg:w="30679"/><text x="46.5035%" y="239.50"></text></g><g><title>[unknown] (30,679 samples, 0.03%)</title><rect x="46.2535%" y="213" width="0.0309%" height="15" fill="rgb(245,182,24)" fg:x="45948287" fg:w="30679"/><text x="46.5035%" y="223.50"></text></g><g><title>[unknown] (30,679 samples, 0.03%)</title><rect x="46.2535%" y="197" width="0.0309%" height="15" fill="rgb(242,14,37)" fg:x="45948287" fg:w="30679"/><text x="46.5035%" y="207.50"></text></g><g><title>[unknown] (30,679 samples, 0.03%)</title><rect x="46.2535%" y="181" width="0.0309%" height="15" fill="rgb(246,228,12)" fg:x="45948287" fg:w="30679"/><text x="46.5035%" y="191.50"></text></g><g><title>[unknown] (30,679 samples, 0.03%)</title><rect x="46.2535%" y="165" width="0.0309%" height="15" fill="rgb(213,55,15)" fg:x="45948287" fg:w="30679"/><text x="46.5035%" y="175.50"></text></g><g><title>[unknown] (30,679 samples, 0.03%)</title><rect x="46.2535%" y="149" width="0.0309%" height="15" fill="rgb(209,9,3)" fg:x="45948287" fg:w="30679"/><text x="46.5035%" y="159.50"></text></g><g><title>__GI___pthread_attr_init (197,758 samples, 0.20%)</title><rect x="46.2844%" y="373" width="0.1991%" height="15" fill="rgb(230,59,30)" fg:x="45978966" fg:w="197758"/><text x="46.5344%" y="383.50"></text></g><g><title>__GI___getpagesize (191,630 samples, 0.19%)</title><rect x="46.2906%" y="357" width="0.1929%" height="15" fill="rgb(209,121,21)" fg:x="45985094" fg:w="191630"/><text x="46.5406%" y="367.50"></text></g><g><title>__GI___pthread_getaffinity_np (191,164 samples, 0.19%)</title><rect x="46.4835%" y="373" width="0.1924%" height="15" fill="rgb(220,109,13)" fg:x="46176724" fg:w="191164"/><text x="46.7335%" y="383.50"></text></g><g><title>[unknown] (143,658 samples, 0.14%)</title><rect x="46.5313%" y="357" width="0.1446%" height="15" fill="rgb(232,18,1)" fg:x="46224230" fg:w="143658"/><text x="46.7813%" y="367.50"></text></g><g><title>[unknown] (143,658 samples, 0.14%)</title><rect x="46.5313%" y="341" width="0.1446%" height="15" fill="rgb(215,41,42)" fg:x="46224230" fg:w="143658"/><text x="46.7813%" y="351.50"></text></g><g><title>[unknown] (143,658 samples, 0.14%)</title><rect x="46.5313%" y="325" width="0.1446%" height="15" fill="rgb(224,123,36)" fg:x="46224230" fg:w="143658"/><text x="46.7813%" y="335.50"></text></g><g><title>[unknown] (143,658 samples, 0.14%)</title><rect x="46.5313%" y="309" width="0.1446%" height="15" fill="rgb(240,125,3)" fg:x="46224230" fg:w="143658"/><text x="46.7813%" y="319.50"></text></g><g><title>[unknown] (143,658 samples, 0.14%)</title><rect x="46.5313%" y="293" width="0.1446%" height="15" fill="rgb(205,98,50)" fg:x="46224230" fg:w="143658"/><text x="46.7813%" y="303.50"></text></g><g><title>[unknown] (143,658 samples, 0.14%)</title><rect x="46.5313%" y="277" width="0.1446%" height="15" fill="rgb(205,185,37)" fg:x="46224230" fg:w="143658"/><text x="46.7813%" y="287.50"></text></g><g><title>[unknown] (62,482 samples, 0.06%)</title><rect x="46.6130%" y="261" width="0.0629%" height="15" fill="rgb(238,207,15)" fg:x="46305406" fg:w="62482"/><text x="46.8630%" y="271.50"></text></g><g><title>[unknown] (62,482 samples, 0.06%)</title><rect x="46.6130%" y="245" width="0.0629%" height="15" fill="rgb(213,199,42)" fg:x="46305406" fg:w="62482"/><text x="46.8630%" y="255.50"></text></g><g><title>[unknown] (62,482 samples, 0.06%)</title><rect x="46.6130%" y="229" width="0.0629%" height="15" fill="rgb(235,201,11)" fg:x="46305406" fg:w="62482"/><text x="46.8630%" y="239.50"></text></g><g><title>__clone3 (46,282,373 samples, 46.59%)</title><rect x="0.0861%" y="453" width="46.5898%" height="15" fill="rgb(207,46,11)" fg:x="85536" fg:w="46282373"/><text x="0.3361%" y="463.50">__clone3</text></g><g><title>start_thread (46,282,373 samples, 46.59%)</title><rect x="0.0861%" y="437" width="46.5898%" height="15" fill="rgb(241,35,35)" fg:x="85536" fg:w="46282373"/><text x="0.3361%" y="447.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (46,276,393 samples, 46.58%)</title><rect x="0.0921%" y="421" width="46.5838%" height="15" fill="rgb(243,32,47)" fg:x="91516" fg:w="46276393"/><text x="0.3421%" y="431.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (567,752 samples, 0.57%)</title><rect x="46.1044%" y="405" width="0.5715%" height="15" fill="rgb(247,202,23)" fg:x="45800157" fg:w="567752"/><text x="46.3544%" y="415.50"></text></g><g><title>__pthread_getattr_np (459,730 samples, 0.46%)</title><rect x="46.2131%" y="389" width="0.4628%" height="15" fill="rgb(219,102,11)" fg:x="45908179" fg:w="459730"/><text x="46.4631%" y="399.50"></text></g><g><title>[unknown] (159,356 samples, 0.16%)</title><rect x="46.6759%" y="389" width="0.1604%" height="15" fill="rgb(243,110,44)" fg:x="46367919" fg:w="159356"/><text x="46.9259%" y="399.50"></text></g><g><title>[unknown] (159,356 samples, 0.16%)</title><rect x="46.6759%" y="373" width="0.1604%" height="15" fill="rgb(222,74,54)" fg:x="46367919" fg:w="159356"/><text x="46.9259%" y="383.50"></text></g><g><title>[unknown] (159,356 samples, 0.16%)</title><rect x="46.6759%" y="357" width="0.1604%" height="15" fill="rgb(216,99,12)" fg:x="46367919" fg:w="159356"/><text x="46.9259%" y="367.50"></text></g><g><title>[unknown] (159,356 samples, 0.16%)</title><rect x="46.6759%" y="341" width="0.1604%" height="15" fill="rgb(226,22,26)" fg:x="46367919" fg:w="159356"/><text x="46.9259%" y="351.50"></text></g><g><title>_dl_start_final (2,098,580 samples, 2.11%)</title><rect x="46.6759%" y="421" width="2.1125%" height="15" fill="rgb(217,163,10)" fg:x="46367919" fg:w="2098580"/><text x="46.9259%" y="431.50">_..</text></g><g><title>_dl_sysdep_start (2,098,580 samples, 2.11%)</title><rect x="46.6759%" y="405" width="2.1125%" height="15" fill="rgb(213,25,53)" fg:x="46367919" fg:w="2098580"/><text x="46.9259%" y="415.50">_..</text></g><g><title>dl_main (1,939,224 samples, 1.95%)</title><rect x="46.8363%" y="389" width="1.9521%" height="15" fill="rgb(252,105,26)" fg:x="46527275" fg:w="1939224"/><text x="47.0863%" y="399.50">d..</text></g><g><title>_dl_map_object_deps (1,939,224 samples, 1.95%)</title><rect x="46.8363%" y="373" width="1.9521%" height="15" fill="rgb(220,39,43)" fg:x="46527275" fg:w="1939224"/><text x="47.0863%" y="383.50">_..</text></g><g><title>_dl_catch_exception (1,939,224 samples, 1.95%)</title><rect x="46.8363%" y="357" width="1.9521%" height="15" fill="rgb(229,68,48)" fg:x="46527275" fg:w="1939224"/><text x="47.0863%" y="367.50">_..</text></g><g><title>openaux (1,939,224 samples, 1.95%)</title><rect x="46.8363%" y="341" width="1.9521%" height="15" fill="rgb(252,8,32)" fg:x="46527275" fg:w="1939224"/><text x="47.0863%" y="351.50">o..</text></g><g><title>_dl_map_object (1,939,224 samples, 1.95%)</title><rect x="46.8363%" y="325" width="1.9521%" height="15" fill="rgb(223,20,43)" fg:x="46527275" fg:w="1939224"/><text x="47.0863%" y="335.50">_..</text></g><g><title>_dl_map_object_from_fd (1,939,224 samples, 1.95%)</title><rect x="46.8363%" y="309" width="1.9521%" height="15" fill="rgb(229,81,49)" fg:x="46527275" fg:w="1939224"/><text x="47.0863%" y="319.50">_..</text></g><g><title>elf_get_dynamic_info (1,939,224 samples, 1.95%)</title><rect x="46.8363%" y="293" width="1.9521%" height="15" fill="rgb(236,28,36)" fg:x="46527275" fg:w="1939224"/><text x="47.0863%" y="303.50">e..</text></g><g><title>[unknown] (1,939,224 samples, 1.95%)</title><rect x="46.8363%" y="277" width="1.9521%" height="15" fill="rgb(249,185,26)" fg:x="46527275" fg:w="1939224"/><text x="47.0863%" y="287.50">[..</text></g><g><title>[unknown] (1,939,224 samples, 1.95%)</title><rect x="46.8363%" y="261" width="1.9521%" height="15" fill="rgb(249,174,33)" fg:x="46527275" fg:w="1939224"/><text x="47.0863%" y="271.50">[..</text></g><g><title>[unknown] (1,939,224 samples, 1.95%)</title><rect x="46.8363%" y="245" width="1.9521%" height="15" fill="rgb(233,201,37)" fg:x="46527275" fg:w="1939224"/><text x="47.0863%" y="255.50">[..</text></g><g><title>[unknown] (1,939,224 samples, 1.95%)</title><rect x="46.8363%" y="229" width="1.9521%" height="15" fill="rgb(221,78,26)" fg:x="46527275" fg:w="1939224"/><text x="47.0863%" y="239.50">[..</text></g><g><title>[unknown] (1,939,224 samples, 1.95%)</title><rect x="46.8363%" y="213" width="1.9521%" height="15" fill="rgb(250,127,30)" fg:x="46527275" fg:w="1939224"/><text x="47.0863%" y="223.50">[..</text></g><g><title>[unknown] (1,939,224 samples, 1.95%)</title><rect x="46.8363%" y="197" width="1.9521%" height="15" fill="rgb(230,49,44)" fg:x="46527275" fg:w="1939224"/><text x="47.0863%" y="207.50">[..</text></g><g><title>_start (2,105,344 samples, 2.12%)</title><rect x="46.6759%" y="453" width="2.1193%" height="15" fill="rgb(229,67,23)" fg:x="46367909" fg:w="2105344"/><text x="46.9259%" y="463.50">_..</text></g><g><title>_dl_start (2,105,343 samples, 2.12%)</title><rect x="46.6759%" y="437" width="2.1193%" height="15" fill="rgb(249,83,47)" fg:x="46367910" fg:w="2105343"/><text x="46.9259%" y="447.50">_..</text></g><g><title>hydra_gateway (48,754,357 samples, 49.08%)</title><rect x="0.0000%" y="469" width="49.0782%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="48754357"/><text x="0.2500%" y="479.50">hydra_gateway</text></g><g><title>core::fmt::write (281,104 samples, 0.28%)</title><rect x="48.7953%" y="453" width="0.2830%" height="15" fill="rgb(238,154,13)" fg:x="48473253" fg:w="281104"/><text x="49.0453%" y="463.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (281,104 samples, 0.28%)</title><rect x="48.7953%" y="437" width="0.2830%" height="15" fill="rgb(219,56,2)" fg:x="48473253" fg:w="281104"/><text x="49.0453%" y="447.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (281,104 samples, 0.28%)</title><rect x="48.7953%" y="421" width="0.2830%" height="15" fill="rgb(233,0,4)" fg:x="48473253" fg:w="281104"/><text x="49.0453%" y="431.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (281,104 samples, 0.28%)</title><rect x="48.7953%" y="405" width="0.2830%" height="15" fill="rgb(235,30,7)" fg:x="48473253" fg:w="281104"/><text x="49.0453%" y="415.50"></text></g><g><title>__GI___libc_write (281,104 samples, 0.28%)</title><rect x="48.7953%" y="389" width="0.2830%" height="15" fill="rgb(250,79,13)" fg:x="48473253" fg:w="281104"/><text x="49.0453%" y="399.50"></text></g><g><title>__GI___libc_write (281,104 samples, 0.28%)</title><rect x="48.7953%" y="373" width="0.2830%" height="15" fill="rgb(211,146,34)" fg:x="48473253" fg:w="281104"/><text x="49.0453%" y="383.50"></text></g><g><title>[unknown] (281,104 samples, 0.28%)</title><rect x="48.7953%" y="357" width="0.2830%" height="15" fill="rgb(228,22,38)" fg:x="48473253" fg:w="281104"/><text x="49.0453%" y="367.50"></text></g><g><title>[[vdso]] (462,629 samples, 0.47%)</title><rect x="49.0782%" y="453" width="0.4657%" height="15" fill="rgb(235,168,5)" fg:x="48754357" fg:w="462629"/><text x="49.3282%" y="463.50"></text></g><g><title>[unknown] (462,629 samples, 0.47%)</title><rect x="49.0782%" y="437" width="0.4657%" height="15" fill="rgb(221,155,16)" fg:x="48754357" fg:w="462629"/><text x="49.3282%" y="447.50"></text></g><g><title>[unknown] (129,998 samples, 0.13%)</title><rect x="49.5439%" y="453" width="0.1309%" height="15" fill="rgb(215,215,53)" fg:x="49216986" fg:w="129998"/><text x="49.7939%" y="463.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (41,363 samples, 0.04%)</title><rect x="49.6748%" y="357" width="0.0416%" height="15" fill="rgb(223,4,10)" fg:x="49347001" fg:w="41363"/><text x="49.9248%" y="367.50"></text></g><g><title>tokio::loom::std::rand::seed (87,125 samples, 0.09%)</title><rect x="49.7338%" y="293" width="0.0877%" height="15" fill="rgb(234,103,6)" fg:x="49405643" fg:w="87125"/><text x="49.9838%" y="303.50"></text></g><g><title>std::sys::pal::unix::rand::hashmap_random_keys (87,125 samples, 0.09%)</title><rect x="49.7338%" y="277" width="0.0877%" height="15" fill="rgb(227,97,0)" fg:x="49405643" fg:w="87125"/><text x="49.9838%" y="287.50"></text></g><g><title>__GI___getrandom (87,125 samples, 0.09%)</title><rect x="49.7338%" y="261" width="0.0877%" height="15" fill="rgb(234,150,53)" fg:x="49405643" fg:w="87125"/><text x="49.9838%" y="271.50"></text></g><g><title>__GI___getrandom (87,125 samples, 0.09%)</title><rect x="49.7338%" y="245" width="0.0877%" height="15" fill="rgb(228,201,54)" fg:x="49405643" fg:w="87125"/><text x="49.9838%" y="255.50"></text></g><g><title>__GI___pthread_enable_asynccancel (87,125 samples, 0.09%)</title><rect x="49.7338%" y="229" width="0.0877%" height="15" fill="rgb(222,22,37)" fg:x="49405643" fg:w="87125"/><text x="49.9838%" y="239.50"></text></g><g><title>[unknown] (34,036 samples, 0.03%)</title><rect x="53.1598%" y="261" width="0.0343%" height="15" fill="rgb(237,53,32)" fg:x="52808998" fg:w="34036"/><text x="53.4098%" y="271.50"></text></g><g><title>exp_inline (1,245,294 samples, 1.25%)</title><rect x="53.1941%" y="229" width="1.2536%" height="15" fill="rgb(233,25,53)" fg:x="52843034" fg:w="1245294"/><text x="53.4441%" y="239.50"></text></g><g><title>log_inline (614,714 samples, 0.62%)</title><rect x="54.4476%" y="229" width="0.6188%" height="15" fill="rgb(210,40,34)" fg:x="54088328" fg:w="614714"/><text x="54.6976%" y="239.50"></text></g><g><title>__pow (3,028,471 samples, 3.05%)</title><rect x="53.1941%" y="261" width="3.0486%" height="15" fill="rgb(241,220,44)" fg:x="52843034" fg:w="3028471"/><text x="53.4441%" y="271.50">__p..</text></g><g><title>__ieee754_pow_fma (3,028,471 samples, 3.05%)</title><rect x="53.1941%" y="245" width="3.0486%" height="15" fill="rgb(235,28,35)" fg:x="52843034" fg:w="3028471"/><text x="53.4441%" y="255.50">__i..</text></g><g><title>top12 (1,168,463 samples, 1.18%)</title><rect x="55.0664%" y="229" width="1.1762%" height="15" fill="rgb(210,56,17)" fg:x="54703042" fg:w="1168463"/><text x="55.3164%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3,929,224 samples, 3.96%)</title><rect x="56.2426%" y="261" width="3.9553%" height="15" fill="rgb(224,130,29)" fg:x="55871505" fg:w="3929224"/><text x="56.4926%" y="271.50">std:..</text></g><g><title>__GI___clock_gettime (3,723,444 samples, 3.75%)</title><rect x="56.4498%" y="245" width="3.7482%" height="15" fill="rgb(235,212,8)" fg:x="56077285" fg:w="3723444"/><text x="56.6998%" y="255.50">__GI..</text></g><g><title>[[vdso]] (2,390,011 samples, 2.41%)</title><rect x="57.7921%" y="229" width="2.4059%" height="15" fill="rgb(223,33,50)" fg:x="57410718" fg:w="2390011"/><text x="58.0421%" y="239.50">[[..</text></g><g><title>[unknown] (1,814,019 samples, 1.83%)</title><rect x="58.3719%" y="213" width="1.8261%" height="15" fill="rgb(219,149,13)" fg:x="57986710" fg:w="1814019"/><text x="58.6219%" y="223.50">[..</text></g><g><title>[unknown] (1,603,355 samples, 1.61%)</title><rect x="58.5840%" y="197" width="1.6140%" height="15" fill="rgb(250,156,29)" fg:x="58197374" fg:w="1603355"/><text x="58.8340%" y="207.50"></text></g><g><title>[unknown] (1,217,352 samples, 1.23%)</title><rect x="58.9725%" y="181" width="1.2254%" height="15" fill="rgb(216,193,19)" fg:x="58583377" fg:w="1217352"/><text x="59.2225%" y="191.50"></text></g><g><title>[unknown] (862,569 samples, 0.87%)</title><rect x="59.3297%" y="165" width="0.8683%" height="15" fill="rgb(216,135,14)" fg:x="58938160" fg:w="862569"/><text x="59.5797%" y="175.50"></text></g><g><title>[unknown] (733,532 samples, 0.74%)</title><rect x="59.4596%" y="149" width="0.7384%" height="15" fill="rgb(241,47,5)" fg:x="59067197" fg:w="733532"/><text x="59.7096%" y="159.50"></text></g><g><title>[unknown] (733,532 samples, 0.74%)</title><rect x="59.4596%" y="133" width="0.7384%" height="15" fill="rgb(233,42,35)" fg:x="59067197" fg:w="733532"/><text x="59.7096%" y="143.50"></text></g><g><title>[unknown] (95,665 samples, 0.10%)</title><rect x="60.1017%" y="117" width="0.0963%" height="15" fill="rgb(231,13,6)" fg:x="59705064" fg:w="95665"/><text x="60.3517%" y="127.50"></text></g><g><title>std::time::Instant::now (470,979 samples, 0.47%)</title><rect x="60.1980%" y="261" width="0.4741%" height="15" fill="rgb(207,181,40)" fg:x="59800729" fg:w="470979"/><text x="60.4480%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (1,032,026 samples, 1.04%)</title><rect x="60.6721%" y="261" width="1.0389%" height="15" fill="rgb(254,173,49)" fg:x="60271708" fg:w="1032026"/><text x="60.9221%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (462,757 samples, 0.47%)</title><rect x="61.7110%" y="261" width="0.4658%" height="15" fill="rgb(221,1,38)" fg:x="61303734" fg:w="462757"/><text x="61.9610%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,274,826 samples, 1.28%)</title><rect x="67.4516%" y="213" width="1.2833%" height="15" fill="rgb(206,124,46)" fg:x="67006512" fg:w="1274826"/><text x="67.7016%" y="223.50"></text></g><g><title>__GI___libc_malloc (268,044 samples, 0.27%)</title><rect x="68.4651%" y="197" width="0.2698%" height="15" fill="rgb(249,21,11)" fg:x="68013294" fg:w="268044"/><text x="68.7151%" y="207.50"></text></g><g><title>mio::poll::Poll::poll (333,102 samples, 0.34%)</title><rect x="69.1682%" y="197" width="0.3353%" height="15" fill="rgb(222,201,40)" fg:x="68711737" fg:w="333102"/><text x="69.4182%" y="207.50"></text></g><g><title>_ZN5tokio7runtime2io6driver6Driver4turn17ha49f73c8fbd3aeb3E.llvm.8110120919802784342 (1,753,046 samples, 1.76%)</title><rect x="68.7349%" y="213" width="1.7647%" height="15" fill="rgb(235,61,29)" fg:x="68281338" fg:w="1753046"/><text x="68.9849%" y="223.50"></text></g><g><title>mio::sys::unix::selector::Selector::select (989,545 samples, 1.00%)</title><rect x="69.5035%" y="197" width="0.9961%" height="15" fill="rgb(219,207,3)" fg:x="69044839" fg:w="989545"/><text x="69.7535%" y="207.50"></text></g><g><title>epoll_wait (721,499 samples, 0.73%)</title><rect x="69.7733%" y="181" width="0.7263%" height="15" fill="rgb(222,56,46)" fg:x="69312885" fg:w="721499"/><text x="70.0233%" y="191.50"></text></g><g><title>[unknown] (459,274 samples, 0.46%)</title><rect x="70.0373%" y="165" width="0.4623%" height="15" fill="rgb(239,76,54)" fg:x="69575110" fg:w="459274"/><text x="70.2873%" y="175.50"></text></g><g><title>[unknown] (459,273 samples, 0.46%)</title><rect x="70.0373%" y="149" width="0.4623%" height="15" fill="rgb(231,124,27)" fg:x="69575111" fg:w="459273"/><text x="70.2873%" y="159.50"></text></g><g><title>[unknown] (459,273 samples, 0.46%)</title><rect x="70.0373%" y="133" width="0.4623%" height="15" fill="rgb(249,195,6)" fg:x="69575111" fg:w="459273"/><text x="70.2873%" y="143.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (5,347,018 samples, 5.38%)</title><rect x="70.4997%" y="213" width="5.3825%" height="15" fill="rgb(237,174,47)" fg:x="70034512" fg:w="5347018"/><text x="70.7497%" y="223.50">tokio::..</text></g><g><title>[unknown] (22,175 samples, 0.02%)</title><rect x="75.8600%" y="197" width="0.0223%" height="15" fill="rgb(206,201,31)" fg:x="75359355" fg:w="22175"/><text x="76.1100%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (590,071 samples, 0.59%)</title><rect x="76.0894%" y="197" width="0.5940%" height="15" fill="rgb(231,57,52)" fg:x="75587310" fg:w="590071"/><text x="76.3394%" y="207.50"></text></g><g><title>__GI___clock_gettime (557,745 samples, 0.56%)</title><rect x="76.1220%" y="181" width="0.5614%" height="15" fill="rgb(248,177,22)" fg:x="75619636" fg:w="557745"/><text x="76.3720%" y="191.50"></text></g><g><title>[[vdso]] (98,472 samples, 0.10%)</title><rect x="76.5843%" y="165" width="0.0991%" height="15" fill="rgb(215,211,37)" fg:x="76078909" fg:w="98472"/><text x="76.8343%" y="175.50"></text></g><g><title>[unknown] (30,330 samples, 0.03%)</title><rect x="76.6529%" y="149" width="0.0305%" height="15" fill="rgb(241,128,51)" fg:x="76147051" fg:w="30330"/><text x="76.9029%" y="159.50"></text></g><g><title>_ZN5tokio7runtime4time6Driver13park_internal17hc8c84d351f2a3a03E.llvm.8110120919802784342 (14,354,064 samples, 14.45%)</title><rect x="66.7885%" y="229" width="14.4494%" height="15" fill="rgb(227,165,31)" fg:x="66347807" fg:w="14354064"/><text x="67.0385%" y="239.50">_ZN5tokio7runtime4time..</text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (5,320,341 samples, 5.36%)</title><rect x="75.8823%" y="213" width="5.3557%" height="15" fill="rgb(228,167,24)" fg:x="75381530" fg:w="5320341"/><text x="76.1323%" y="223.50">tokio::..</text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (4,522,669 samples, 4.55%)</title><rect x="76.6852%" y="197" width="4.5527%" height="15" fill="rgb(228,143,12)" fg:x="76179202" fg:w="4522669"/><text x="76.9352%" y="207.50">tokio..</text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (4,437,409 samples, 4.47%)</title><rect x="76.7711%" y="181" width="4.4669%" height="15" fill="rgb(249,149,8)" fg:x="76264462" fg:w="4437409"/><text x="77.0211%" y="191.50">tokio..</text></g><g><title>_ZN5tokio7runtime4time5wheel5Wheel15next_expiration17h99243775a87c69d5E.llvm.13589038213174376687 (4,214,028 samples, 4.24%)</title><rect x="76.9959%" y="165" width="4.2420%" height="15" fill="rgb(243,35,44)" fg:x="76487843" fg:w="4214028"/><text x="77.2459%" y="175.50">_ZN5t..</text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (4,214,028 samples, 4.24%)</title><rect x="76.9959%" y="149" width="4.2420%" height="15" fill="rgb(246,89,9)" fg:x="76487843" fg:w="4214028"/><text x="77.2459%" y="159.50">tokio..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1,975,145 samples, 1.99%)</title><rect x="81.2380%" y="229" width="1.9883%" height="15" fill="rgb(233,213,13)" fg:x="80701871" fg:w="1975145"/><text x="81.4880%" y="239.50">p..</text></g><g><title>syscall (589,456 samples, 0.59%)</title><rect x="82.6329%" y="213" width="0.5934%" height="15" fill="rgb(233,141,41)" fg:x="82087560" fg:w="589456"/><text x="82.8829%" y="223.50"></text></g><g><title>[unknown] (459,457 samples, 0.46%)</title><rect x="82.7637%" y="197" width="0.4625%" height="15" fill="rgb(239,167,4)" fg:x="82217559" fg:w="459457"/><text x="83.0137%" y="207.50"></text></g><g><title>[unknown] (459,456 samples, 0.46%)</title><rect x="82.7637%" y="181" width="0.4625%" height="15" fill="rgb(209,217,16)" fg:x="82217560" fg:w="459456"/><text x="83.0137%" y="191.50"></text></g><g><title>[unknown] (459,456 samples, 0.46%)</title><rect x="82.7637%" y="165" width="0.4625%" height="15" fill="rgb(219,88,35)" fg:x="82217560" fg:w="459456"/><text x="83.0137%" y="175.50"></text></g><g><title>[unknown] (459,456 samples, 0.46%)</title><rect x="82.7637%" y="149" width="0.4625%" height="15" fill="rgb(220,193,23)" fg:x="82217560" fg:w="459456"/><text x="83.0137%" y="159.50"></text></g><g><title>[unknown] (459,456 samples, 0.46%)</title><rect x="82.7637%" y="133" width="0.4625%" height="15" fill="rgb(230,90,52)" fg:x="82217560" fg:w="459456"/><text x="83.0137%" y="143.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (21,239,497 samples, 21.38%)</title><rect x="62.1768%" y="261" width="21.3806%" height="15" fill="rgb(252,106,19)" fg:x="61766491" fg:w="21239497"/><text x="62.4268%" y="271.50">tokio::runtime::scheduler::multi_t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (18,764,936 samples, 18.89%)</title><rect x="64.6678%" y="245" width="18.8896%" height="15" fill="rgb(206,74,20)" fg:x="64241052" fg:w="18764936"/><text x="64.9178%" y="255.50">tokio::runtime::scheduler::mul..</text></g><g><title>tokio::runtime::driver::Driver::park (328,972 samples, 0.33%)</title><rect x="83.2262%" y="229" width="0.3312%" height="15" fill="rgb(230,138,44)" fg:x="82677016" fg:w="328972"/><text x="83.4762%" y="239.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1,062,291 samples, 1.07%)</title><rect x="83.7396%" y="229" width="1.0693%" height="15" fill="rgb(235,182,43)" fg:x="83186975" fg:w="1062291"/><text x="83.9896%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (423,856 samples, 0.43%)</title><rect x="84.8089%" y="229" width="0.4267%" height="15" fill="rgb(242,16,51)" fg:x="84249266" fg:w="423856"/><text x="85.0589%" y="239.50"></text></g><g><title>__GI___clock_gettime (423,856 samples, 0.43%)</title><rect x="84.8089%" y="213" width="0.4267%" height="15" fill="rgb(248,9,4)" fg:x="84249266" fg:w="423856"/><text x="85.0589%" y="223.50"></text></g><g><title>[[vdso]] (423,856 samples, 0.43%)</title><rect x="84.8089%" y="197" width="0.4267%" height="15" fill="rgb(210,31,22)" fg:x="84249266" fg:w="423856"/><text x="85.0589%" y="207.50"></text></g><g><title>[unknown] (423,856 samples, 0.43%)</title><rect x="84.8089%" y="181" width="0.4267%" height="15" fill="rgb(239,54,39)" fg:x="84249266" fg:w="423856"/><text x="85.0589%" y="191.50"></text></g><g><title>[unknown] (423,856 samples, 0.43%)</title><rect x="84.8089%" y="165" width="0.4267%" height="15" fill="rgb(230,99,41)" fg:x="84249266" fg:w="423856"/><text x="85.0589%" y="175.50"></text></g><g><title>[unknown] (423,856 samples, 0.43%)</title><rect x="84.8089%" y="149" width="0.4267%" height="15" fill="rgb(253,106,12)" fg:x="84249266" fg:w="423856"/><text x="85.0589%" y="159.50"></text></g><g><title>[unknown] (423,856 samples, 0.43%)</title><rect x="84.8089%" y="133" width="0.4267%" height="15" fill="rgb(213,46,41)" fg:x="84249266" fg:w="423856"/><text x="85.0589%" y="143.50"></text></g><g><title>[unknown] (423,856 samples, 0.43%)</title><rect x="84.8089%" y="117" width="0.4267%" height="15" fill="rgb(215,133,35)" fg:x="84249266" fg:w="423856"/><text x="85.0589%" y="127.50"></text></g><g><title>[unknown] (423,856 samples, 0.43%)</title><rect x="84.8089%" y="101" width="0.4267%" height="15" fill="rgb(213,28,5)" fg:x="84249266" fg:w="423856"/><text x="85.0589%" y="111.50"></text></g><g><title>[unknown] (205,780 samples, 0.21%)</title><rect x="85.0284%" y="85" width="0.2071%" height="15" fill="rgb(215,77,49)" fg:x="84467342" fg:w="205780"/><text x="85.2784%" y="95.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1,765,544 samples, 1.78%)</title><rect x="83.5574%" y="245" width="1.7773%" height="15" fill="rgb(248,100,22)" fg:x="83005988" fg:w="1765544"/><text x="83.8074%" y="255.50">p..</text></g><g><title>syscall (98,410 samples, 0.10%)</title><rect x="85.2356%" y="229" width="0.0991%" height="15" fill="rgb(208,67,9)" fg:x="84673122" fg:w="98410"/><text x="85.4856%" y="239.50"></text></g><g><title>[unknown] (98,410 samples, 0.10%)</title><rect x="85.2356%" y="213" width="0.0991%" height="15" fill="rgb(219,133,21)" fg:x="84673122" fg:w="98410"/><text x="85.4856%" y="223.50"></text></g><g><title>[unknown] (98,410 samples, 0.10%)</title><rect x="85.2356%" y="197" width="0.0991%" height="15" fill="rgb(246,46,29)" fg:x="84673122" fg:w="98410"/><text x="85.4856%" y="207.50"></text></g><g><title>[unknown] (98,410 samples, 0.10%)</title><rect x="85.2356%" y="181" width="0.0991%" height="15" fill="rgb(246,185,52)" fg:x="84673122" fg:w="98410"/><text x="85.4856%" y="191.50"></text></g><g><title>[unknown] (98,410 samples, 0.10%)</title><rect x="85.2356%" y="165" width="0.0991%" height="15" fill="rgb(252,136,11)" fg:x="84673122" fg:w="98410"/><text x="85.4856%" y="175.50"></text></g><g><title>[unknown] (98,410 samples, 0.10%)</title><rect x="85.2356%" y="149" width="0.0991%" height="15" fill="rgb(219,138,53)" fg:x="84673122" fg:w="98410"/><text x="85.4856%" y="159.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (580,141 samples, 0.58%)</title><rect x="85.3347%" y="245" width="0.5840%" height="15" fill="rgb(211,51,23)" fg:x="84771532" fg:w="580141"/><text x="85.5847%" y="255.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (580,141 samples, 0.58%)</title><rect x="85.3347%" y="229" width="0.5840%" height="15" fill="rgb(247,221,28)" fg:x="84771532" fg:w="580141"/><text x="85.5847%" y="239.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (547,281 samples, 0.55%)</title><rect x="85.3677%" y="213" width="0.5509%" height="15" fill="rgb(251,222,45)" fg:x="84804392" fg:w="547281"/><text x="85.6177%" y="223.50"></text></g><g><title>__GI___libc_write (547,281 samples, 0.55%)</title><rect x="85.3677%" y="197" width="0.5509%" height="15" fill="rgb(217,162,53)" fg:x="84804392" fg:w="547281"/><text x="85.6177%" y="207.50"></text></g><g><title>__GI___libc_write (547,281 samples, 0.55%)</title><rect x="85.3677%" y="181" width="0.5509%" height="15" fill="rgb(229,93,14)" fg:x="84804392" fg:w="547281"/><text x="85.6177%" y="191.50"></text></g><g><title>[unknown] (547,281 samples, 0.55%)</title><rect x="85.3677%" y="165" width="0.5509%" height="15" fill="rgb(209,67,49)" fg:x="84804392" fg:w="547281"/><text x="85.6177%" y="175.50"></text></g><g><title>[unknown] (547,281 samples, 0.55%)</title><rect x="85.3677%" y="149" width="0.5509%" height="15" fill="rgb(213,87,29)" fg:x="84804392" fg:w="547281"/><text x="85.6177%" y="159.50"></text></g><g><title>[unknown] (547,281 samples, 0.55%)</title><rect x="85.3677%" y="133" width="0.5509%" height="15" fill="rgb(205,151,52)" fg:x="84804392" fg:w="547281"/><text x="85.6177%" y="143.50"></text></g><g><title>[unknown] (547,281 samples, 0.55%)</title><rect x="85.3677%" y="117" width="0.5509%" height="15" fill="rgb(253,215,39)" fg:x="84804392" fg:w="547281"/><text x="85.6177%" y="127.50"></text></g><g><title>[unknown] (547,281 samples, 0.55%)</title><rect x="85.3677%" y="101" width="0.5509%" height="15" fill="rgb(221,220,41)" fg:x="84804392" fg:w="547281"/><text x="85.6177%" y="111.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (939,986 samples, 0.95%)</title><rect x="85.9186%" y="245" width="0.9462%" height="15" fill="rgb(218,133,21)" fg:x="85351673" fg:w="939986"/><text x="86.1686%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (921,812 samples, 0.93%)</title><rect x="86.8649%" y="245" width="0.9279%" height="15" fill="rgb(221,193,43)" fg:x="86291659" fg:w="921812"/><text x="87.1149%" y="255.50"></text></g><g><title>_ZN13hydra_gateway4main28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h03d58fec048b388fE.llvm.5566040627937276974 (1,549,390 samples, 1.56%)</title><rect x="87.9490%" y="213" width="1.5597%" height="15" fill="rgb(240,128,52)" fg:x="87368614" fg:w="1549390"/><text x="88.1990%" y="223.50"></text></g><g><title>tokio::runtime::context::current::with_current (1,549,390 samples, 1.56%)</title><rect x="87.9490%" y="197" width="1.5597%" height="15" fill="rgb(253,114,12)" fg:x="87368614" fg:w="1549390"/><text x="88.1990%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::Handle::spawn (1,549,390 samples, 1.56%)</title><rect x="87.9490%" y="181" width="1.5597%" height="15" fill="rgb(215,223,47)" fg:x="87368614" fg:w="1549390"/><text x="88.1990%" y="191.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (1,549,390 samples, 1.56%)</title><rect x="87.9490%" y="165" width="1.5597%" height="15" fill="rgb(248,225,23)" fg:x="87368614" fg:w="1549390"/><text x="88.1990%" y="175.50"></text></g><g><title>__rdl_alloc (1,549,390 samples, 1.56%)</title><rect x="87.9490%" y="149" width="1.5597%" height="15" fill="rgb(250,108,0)" fg:x="87368614" fg:w="1549390"/><text x="88.1990%" y="159.50"></text></g><g><title>__posix_memalign (1,549,390 samples, 1.56%)</title><rect x="87.9490%" y="133" width="1.5597%" height="15" fill="rgb(228,208,7)" fg:x="87368614" fg:w="1549390"/><text x="88.1990%" y="143.50"></text></g><g><title>__posix_memalign (1,549,390 samples, 1.56%)</title><rect x="87.9490%" y="117" width="1.5597%" height="15" fill="rgb(244,45,10)" fg:x="87368614" fg:w="1549390"/><text x="88.1990%" y="127.50"></text></g><g><title>_mid_memalign (1,549,390 samples, 1.56%)</title><rect x="87.9490%" y="101" width="1.5597%" height="15" fill="rgb(207,125,25)" fg:x="87368614" fg:w="1549390"/><text x="88.1990%" y="111.50"></text></g><g><title>_int_memalign (1,549,390 samples, 1.56%)</title><rect x="87.9490%" y="85" width="1.5597%" height="15" fill="rgb(210,195,18)" fg:x="87368614" fg:w="1549390"/><text x="88.1990%" y="95.50"></text></g><g><title>_int_malloc (1,549,390 samples, 1.56%)</title><rect x="87.9490%" y="69" width="1.5597%" height="15" fill="rgb(249,80,12)" fg:x="87368614" fg:w="1549390"/><text x="88.1990%" y="79.50"></text></g><g><title>[unknown] (1,549,390 samples, 1.56%)</title><rect x="87.9490%" y="53" width="1.5597%" height="15" fill="rgb(221,65,9)" fg:x="87368614" fg:w="1549390"/><text x="88.1990%" y="63.50"></text></g><g><title>[unknown] (1,549,390 samples, 1.56%)</title><rect x="87.9490%" y="37" width="1.5597%" height="15" fill="rgb(235,49,36)" fg:x="87368614" fg:w="1549390"/><text x="88.1990%" y="47.50"></text></g><g><title>__GI___libc_free (1,662,835 samples, 1.67%)</title><rect x="90.1138%" y="197" width="1.6739%" height="15" fill="rgb(225,32,20)" fg:x="89519142" fg:w="1662835"/><text x="90.3638%" y="207.50"></text></g><g><title>_int_free (828,385 samples, 0.83%)</title><rect x="90.9538%" y="181" width="0.8339%" height="15" fill="rgb(215,141,46)" fg:x="90353592" fg:w="828385"/><text x="91.2038%" y="191.50"></text></g><g><title>core::slice::memchr::memrchr (294,892 samples, 0.30%)</title><rect x="92.4670%" y="117" width="0.2969%" height="15" fill="rgb(250,160,47)" fg:x="91856783" fg:w="294892"/><text x="92.7170%" y="127.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (637,211 samples, 0.64%)</title><rect x="92.1971%" y="149" width="0.6414%" height="15" fill="rgb(216,222,40)" fg:x="91588739" fg:w="637211"/><text x="92.4471%" y="159.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (637,211 samples, 0.64%)</title><rect x="92.1971%" y="133" width="0.6414%" height="15" fill="rgb(234,217,39)" fg:x="91588739" fg:w="637211"/><text x="92.4471%" y="143.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (74,275 samples, 0.07%)</title><rect x="92.7638%" y="117" width="0.0748%" height="15" fill="rgb(207,178,40)" fg:x="92151675" fg:w="74275"/><text x="93.0138%" y="127.50"></text></g><g><title>__GI___libc_write (74,275 samples, 0.07%)</title><rect x="92.7638%" y="101" width="0.0748%" height="15" fill="rgb(221,136,13)" fg:x="92151675" fg:w="74275"/><text x="93.0138%" y="111.50"></text></g><g><title>core::fmt::write (1,861,424 samples, 1.87%)</title><rect x="91.7877%" y="165" width="1.8738%" height="15" fill="rgb(249,199,10)" fg:x="91181986" fg:w="1861424"/><text x="92.0377%" y="175.50">c..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for usize&gt;::fmt (817,460 samples, 0.82%)</title><rect x="92.8386%" y="149" width="0.8229%" height="15" fill="rgb(249,222,13)" fg:x="92225950" fg:w="817460"/><text x="93.0886%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral (193,207 samples, 0.19%)</title><rect x="93.4670%" y="133" width="0.1945%" height="15" fill="rgb(244,185,38)" fg:x="92850203" fg:w="193207"/><text x="93.7170%" y="143.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (72,538 samples, 0.07%)</title><rect x="93.5885%" y="117" width="0.0730%" height="15" fill="rgb(236,202,9)" fg:x="92970872" fg:w="72538"/><text x="93.8385%" y="127.50"></text></g><g><title>std::io::stdio::_print (2,395,997 samples, 2.41%)</title><rect x="91.7877%" y="197" width="2.4119%" height="15" fill="rgb(250,229,37)" fg:x="91181977" fg:w="2395997"/><text x="92.0377%" y="207.50">st..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (2,395,997 samples, 2.41%)</title><rect x="91.7877%" y="181" width="2.4119%" height="15" fill="rgb(206,174,23)" fg:x="91181977" fg:w="2395997"/><text x="92.0377%" y="191.50">&lt;&amp;..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (534,564 samples, 0.54%)</title><rect x="93.6615%" y="165" width="0.5381%" height="15" fill="rgb(211,33,43)" fg:x="93043410" fg:w="534564"/><text x="93.9115%" y="175.50"></text></g><g><title>syscall (218,076 samples, 0.22%)</title><rect x="93.9801%" y="149" width="0.2195%" height="15" fill="rgb(245,58,50)" fg:x="93359898" fg:w="218076"/><text x="94.2301%" y="159.50"></text></g><g><title>[unknown] (218,076 samples, 0.22%)</title><rect x="93.9801%" y="133" width="0.2195%" height="15" fill="rgb(244,68,36)" fg:x="93359898" fg:w="218076"/><text x="94.2301%" y="143.50"></text></g><g><title>[unknown] (218,076 samples, 0.22%)</title><rect x="93.9801%" y="117" width="0.2195%" height="15" fill="rgb(232,229,15)" fg:x="93359898" fg:w="218076"/><text x="94.2301%" y="127.50"></text></g><g><title>[unknown] (218,076 samples, 0.22%)</title><rect x="93.9801%" y="101" width="0.2195%" height="15" fill="rgb(254,30,23)" fg:x="93359898" fg:w="218076"/><text x="94.2301%" y="111.50"></text></g><g><title>[unknown] (218,076 samples, 0.22%)</title><rect x="93.9801%" y="85" width="0.2195%" height="15" fill="rgb(235,160,14)" fg:x="93359898" fg:w="218076"/><text x="94.2301%" y="95.50"></text></g><g><title>[unknown] (218,076 samples, 0.22%)</title><rect x="93.9801%" y="69" width="0.2195%" height="15" fill="rgb(212,155,44)" fg:x="93359898" fg:w="218076"/><text x="94.2301%" y="79.50"></text></g><g><title>[unknown] (218,076 samples, 0.22%)</title><rect x="93.9801%" y="53" width="0.2195%" height="15" fill="rgb(226,2,50)" fg:x="93359898" fg:w="218076"/><text x="94.2301%" y="63.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (1,285,961 samples, 1.29%)</title><rect x="95.0263%" y="181" width="1.2945%" height="15" fill="rgb(234,177,6)" fg:x="94399230" fg:w="1285961"/><text x="95.2763%" y="191.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (1,285,961 samples, 1.29%)</title><rect x="95.0263%" y="165" width="1.2945%" height="15" fill="rgb(217,24,9)" fg:x="94399230" fg:w="1285961"/><text x="95.2763%" y="175.50"></text></g><g><title>__libc_send (1,004,857 samples, 1.01%)</title><rect x="95.3093%" y="149" width="1.0115%" height="15" fill="rgb(220,13,46)" fg:x="94680334" fg:w="1004857"/><text x="95.5593%" y="159.50"></text></g><g><title>__libc_send (1,004,857 samples, 1.01%)</title><rect x="95.3093%" y="133" width="1.0115%" height="15" fill="rgb(239,221,27)" fg:x="94680334" fg:w="1004857"/><text x="95.5593%" y="143.50"></text></g><g><title>[unknown] (1,004,857 samples, 1.01%)</title><rect x="95.3093%" y="117" width="1.0115%" height="15" fill="rgb(222,198,25)" fg:x="94680334" fg:w="1004857"/><text x="95.5593%" y="127.50"></text></g><g><title>[unknown] (690,141 samples, 0.69%)</title><rect x="95.6261%" y="101" width="0.6947%" height="15" fill="rgb(211,99,13)" fg:x="94995050" fg:w="690141"/><text x="95.8761%" y="111.50"></text></g><g><title>[unknown] (690,141 samples, 0.69%)</title><rect x="95.6261%" y="85" width="0.6947%" height="15" fill="rgb(232,111,31)" fg:x="94995050" fg:w="690141"/><text x="95.8761%" y="95.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (2,500,878 samples, 2.52%)</title><rect x="94.1996%" y="197" width="2.5175%" height="15" fill="rgb(245,82,37)" fg:x="93577974" fg:w="2500878"/><text x="94.4496%" y="207.50">to..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (393,661 samples, 0.40%)</title><rect x="96.3208%" y="181" width="0.3963%" height="15" fill="rgb(227,149,46)" fg:x="95685191" fg:w="393661"/><text x="96.5708%" y="191.50"></text></g><g><title>&lt;tokio::sync::mpsc::unbounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (458,064 samples, 0.46%)</title><rect x="96.9271%" y="181" width="0.4611%" height="15" fill="rgb(218,36,50)" fg:x="96287468" fg:w="458064"/><text x="97.1771%" y="191.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1,153,627 samples, 1.16%)</title><rect x="97.3882%" y="181" width="1.1613%" height="15" fill="rgb(226,80,48)" fg:x="96745532" fg:w="1153627"/><text x="97.6382%" y="191.50"></text></g><g><title>_ZN13hydra_gateway4main28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h1869b4fe9052079bE.llvm.5566040627937276974 (9,443,784 samples, 9.51%)</title><rect x="89.5087%" y="213" width="9.5065%" height="15" fill="rgb(238,224,15)" fg:x="88918004" fg:w="9443784"/><text x="89.7587%" y="223.50">_ZN13hydra_gat..</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (2,282,936 samples, 2.30%)</title><rect x="96.7171%" y="197" width="2.2981%" height="15" fill="rgb(241,136,10)" fg:x="96078852" fg:w="2282936"/><text x="96.9671%" y="207.50">t..</text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (462,629 samples, 0.47%)</title><rect x="98.5495%" y="181" width="0.4657%" height="15" fill="rgb(208,32,45)" fg:x="97899159" fg:w="462629"/><text x="98.7995%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (462,629 samples, 0.47%)</title><rect x="98.5495%" y="165" width="0.4657%" height="15" fill="rgb(207,135,9)" fg:x="97899159" fg:w="462629"/><text x="98.7995%" y="175.50"></text></g><g><title>_ZN13hydra_gateway4main28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hbc2c5f71905eefbcE.llvm.5566040627937276974 (315,797 samples, 0.32%)</title><rect x="99.0152%" y="213" width="0.3179%" height="15" fill="rgb(206,86,44)" fg:x="98361788" fg:w="315797"/><text x="99.2652%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serialport::posix::tty::TTYPort&gt; (315,797 samples, 0.32%)</title><rect x="99.0152%" y="197" width="0.3179%" height="15" fill="rgb(245,177,15)" fg:x="98361788" fg:w="315797"/><text x="99.2652%" y="207.50"></text></g><g><title>__GI___ioctl (315,797 samples, 0.32%)</title><rect x="99.0152%" y="181" width="0.3179%" height="15" fill="rgb(206,64,50)" fg:x="98361788" fg:w="315797"/><text x="99.2652%" y="191.50"></text></g><g><title>[unknown] (315,797 samples, 0.32%)</title><rect x="99.0152%" y="165" width="0.3179%" height="15" fill="rgb(234,36,40)" fg:x="98361788" fg:w="315797"/><text x="99.2652%" y="175.50"></text></g><g><title>[unknown] (315,797 samples, 0.32%)</title><rect x="99.0152%" y="149" width="0.3179%" height="15" fill="rgb(213,64,8)" fg:x="98361788" fg:w="315797"/><text x="99.2652%" y="159.50"></text></g><g><title>[unknown] (315,797 samples, 0.32%)</title><rect x="99.0152%" y="133" width="0.3179%" height="15" fill="rgb(210,75,36)" fg:x="98361788" fg:w="315797"/><text x="99.2652%" y="143.50"></text></g><g><title>[unknown] (315,797 samples, 0.32%)</title><rect x="99.0152%" y="117" width="0.3179%" height="15" fill="rgb(229,88,21)" fg:x="98361788" fg:w="315797"/><text x="99.2652%" y="127.50"></text></g><g><title>[unknown] (315,797 samples, 0.32%)</title><rect x="99.0152%" y="101" width="0.3179%" height="15" fill="rgb(252,204,47)" fg:x="98361788" fg:w="315797"/><text x="99.2652%" y="111.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (11,880,788 samples, 11.96%)</title><rect x="87.9490%" y="229" width="11.9597%" height="15" fill="rgb(208,77,27)" fg:x="87368614" fg:w="11880788"/><text x="88.1990%" y="239.50">tokio::runtime::ta..</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (571,817 samples, 0.58%)</title><rect x="99.3331%" y="213" width="0.5756%" height="15" fill="rgb(221,76,26)" fg:x="98677585" fg:w="571817"/><text x="99.5831%" y="223.50"></text></g><g><title>all (99,340,105 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(225,139,18)" fg:x="0" fg:w="99340105"/><text x="0.2500%" y="495.50"></text></g><g><title>tokio-runtime-w (50,585,748 samples, 50.92%)</title><rect x="49.0782%" y="469" width="50.9218%" height="15" fill="rgb(230,137,11)" fg:x="48754357" fg:w="50585748"/><text x="49.3282%" y="479.50">tokio-runtime-w</text></g><g><title>__clone3 (49,993,121 samples, 50.33%)</title><rect x="49.6748%" y="453" width="50.3252%" height="15" fill="rgb(212,28,1)" fg:x="49346984" fg:w="49993121"/><text x="49.9248%" y="463.50">__clone3</text></g><g><title>start_thread (49,993,121 samples, 50.33%)</title><rect x="49.6748%" y="437" width="50.3252%" height="15" fill="rgb(248,164,17)" fg:x="49346984" fg:w="49993121"/><text x="49.9248%" y="447.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (49,993,121 samples, 50.33%)</title><rect x="49.6748%" y="421" width="50.3252%" height="15" fill="rgb(222,171,42)" fg:x="49346984" fg:w="49993121"/><text x="49.9248%" y="431.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (49,993,121 samples, 50.33%)</title><rect x="49.6748%" y="405" width="50.3252%" height="15" fill="rgb(243,84,45)" fg:x="49346984" fg:w="49993121"/><text x="49.9248%" y="415.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (49,993,121 samples, 50.33%)</title><rect x="49.6748%" y="389" width="50.3252%" height="15" fill="rgb(252,49,23)" fg:x="49346984" fg:w="49993121"/><text x="49.9248%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (49,993,121 samples, 50.33%)</title><rect x="49.6748%" y="373" width="50.3252%" height="15" fill="rgb(215,19,7)" fg:x="49346984" fg:w="49993121"/><text x="49.9248%" y="383.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (49,950,769 samples, 50.28%)</title><rect x="49.7174%" y="357" width="50.2826%" height="15" fill="rgb(238,81,41)" fg:x="49389336" fg:w="49950769"/><text x="49.9674%" y="367.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (49,942,347 samples, 50.27%)</title><rect x="49.7259%" y="341" width="50.2741%" height="15" fill="rgb(210,199,37)" fg:x="49397758" fg:w="49942347"/><text x="49.9759%" y="351.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (49,942,347 samples, 50.27%)</title><rect x="49.7259%" y="325" width="50.2741%" height="15" fill="rgb(244,192,49)" fg:x="49397758" fg:w="49942347"/><text x="49.9759%" y="335.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (49,934,462 samples, 50.27%)</title><rect x="49.7338%" y="309" width="50.2662%" height="15" fill="rgb(226,211,11)" fg:x="49405643" fg:w="49934462"/><text x="49.9838%" y="319.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (49,847,337 samples, 50.18%)</title><rect x="49.8215%" y="293" width="50.1785%" height="15" fill="rgb(236,162,54)" fg:x="49492768" fg:w="49847337"/><text x="50.0715%" y="303.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (49,847,337 samples, 50.18%)</title><rect x="49.8215%" y="277" width="50.1785%" height="15" fill="rgb(220,229,9)" fg:x="49492768" fg:w="49847337"/><text x="50.0715%" y="287.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (16,334,117 samples, 16.44%)</title><rect x="83.5574%" y="261" width="16.4426%" height="15" fill="rgb(250,87,22)" fg:x="83005988" fg:w="16334117"/><text x="83.8074%" y="271.50">tokio::runtime::scheduler..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (12,126,634 samples, 12.21%)</title><rect x="87.7928%" y="245" width="12.2072%" height="15" fill="rgb(239,43,17)" fg:x="87213471" fg:w="12126634"/><text x="88.0428%" y="255.50">tokio::runtime::ta..</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (90,703 samples, 0.09%)</title><rect x="99.9087%" y="229" width="0.0913%" height="15" fill="rgb(231,177,25)" fg:x="99249402" fg:w="90703"/><text x="100.1587%" y="239.50"></text></g></svg></svg>