{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import zmq from \"zeromq\";\nimport PocketBase from \"pocketbase\";\n// Ayo? ðŸ¤¨\nimport { Air, Data, EkfNav1, EkfNav2, GpsVel, Imu1, Imu2, LinkStatus, ProcessedMessage, UtcTime } from \"@rgs/bindings\"\n\nconsole.info(\"Started DB Service\");\n\n// Keep calling http://127.0.0.1:8090/api/health until it responds\nconst TIMEOUT = 5000;\nconst start = Date.now();\nlet started = false;\nwhile (!started) {\n  try {\n    const res = await fetch(\"http://127.0.0.1:8090/api/health\", {\n      method: \"GET\",\n    });\n    if (res.status === 200) {\n      console.info(\"PocketBase server started successfully\");\n      started = true;\n    }\n  } catch (e) {\n    // Ignore\n  }\n  if (Date.now() - start > TIMEOUT) {\n    console.error(\"PocketBase server did not start in time\");\n    throw new Error(\"PocketBase server did not start in time\");\n  }\n}\n\n// Connect to PocketBase server\nif (process.env.DB_ADMIN === undefined || process.env.DB_ADMIN === \"\") {\n  console.error(\"DB_ADMIN is not set\");\n  throw new Error(\"DB_ADMIN is not set\");\n}\nif (\n  process.env.DB_ADMIN_PASSWORD === undefined ||\n  process.env.DB_ADMIN_PASSWORD === \"\"\n) {\n  console.error(\"DB_ADMIN_PASSWORD is not set\");\n  throw new Error(\"DB_ADMIN_PASSWORD is not set\");\n}\nif (process.env.DB_REST_PORT === undefined || process.env.DB_REST_PORT === \"\") {\n  console.error(\"DB_REST_PORT is not set\");\n  throw new Error(\"DB_REST_PORT is not set\");\n}\n\nconsole.info(\"Connecting to PocketBase server\");\nconst pb = new PocketBase(\n  `http://127.0.0.1:${process.env.DB_REST_PORT ?? \"8090\"}`\n);\nawait pb.admins.authWithPassword(\n  process.env.DB_ADMIN,\n  process.env.DB_ADMIN_PASSWORD\n);\n\n// Setup ZMQ subscriber\n/**\n * @type {zmq.Subscriber}\n */\nconst zmqSock = new zmq.Subscriber();\nzmqSock.connectTimeout = 1000;\nzmqSock.connect(`tcp://localhost:${process.env.ZMQ_PORT ?? \"3002\"}`);\nzmqSock.subscribe();\n\nconsole.log(\n  \"Connected to ZMQ on address\",\n  `tcp://localhost:${process.env.ZMQ_PORT ?? \"3002\"}`\n);\n\n// Listen and store messages\nfor await (const [msg] of zmqSock) {\n  const obj = JSON.parse(msg.toString()) as ProcessedMessage;\n  if (\"RocketMessage\" in obj) {\n    const rocketMsg = obj.RocketMessage;\n    const rocketData: Data = rocketMsg.data;\n    pb.collection(\"raw\").create({\n      data: rocketData\n    });\n\n    console.info(\"Adding raw data\", rocketData);\n    // { state: State } | { sensor: Sensor } | { log: Log };\n    if (\"state\" in rocketData) {\n      const dataState = rocketData.state; // State\n      pb.collection(\"State\").create({\n        status: dataState.status,\n        has_error: dataState.has_error,\n      });\n    } else if (\"sensor\" in rocketData) {\n      const dataSensor = rocketData.sensor; // Sensor\n      const sensorData = dataSensor.data;\n      if (\"UtcTime\" in sensorData) {\n        const utcTime = sensorData.UtcTime as UtcTime;\n        // No use yet, but its already stored in the raw data\n      } else if (\"Air\" in sensorData) {\n        const air = sensorData.Air as Air;\n        pb.collection(\"Air\").create({\n          timestamp: air.time_stamp,\n          status: air.status,\n          pressure_abs: air.pressure_abs,\n          altitude: air.altitude,\n          pressure_diff: air.pressure_diff,\n          true_airspeed: air.true_airspeed,\n          air_temperature: air.air_temperature,\n        },\n          {\n            $autoCancel: false,\n          });\n\n      } else if (\"EkfQuat\" in sensorData) {\n        await pb.collection(\"EkfQuat\").create(\n          {\n            time_stamp: sensorData.EkfQuat.time_stamp,\n            quaternion_0: sensorData.EkfQuat.quaternion[0],\n            quaternion_1: sensorData.EkfQuat.quaternion[1],\n            quaternion_2: sensorData.EkfQuat.quaternion[2],\n            quaternion_3: sensorData.EkfQuat.quaternion[3],\n            euler_std_dev_0: sensorData.EkfQuat.euler_std_dev[0],\n            euler_std_dev_1: sensorData.EkfQuat.euler_std_dev[1],\n            euler_std_dev_2: sensorData.EkfQuat.euler_std_dev[2],\n            status: sensorData.EkfQuat.status,\n          },\n          {\n            $autoCancel: false,\n          }\n        );\n      } else if (\"EkfNav1\" in sensorData) {\n        const ekfNav1 = sensorData.EkfNav1 as EkfNav1;\n        pb.collection(\"EkfNav1\").create(\n          {\n            time_stamp: ekfNav1.time_stamp,\n            velocity_0: ekfNav1.velocity[0],\n            velocity_1: ekfNav1.velocity[1],\n            velocity_2: ekfNav1.velocity[2],\n            velocity_std_dev_0: ekfNav1.velocity_std_dev[0],\n            velocity_std_dev_1: ekfNav1.velocity_std_dev[1],\n            velocity_std_dev_2: ekfNav1.velocity_std_dev[2],\n          }, {\n          $autoCancel: false,\n        }\n        );\n\n      } else if (\"EkfNav2\" in sensorData) {\n        const ekfNav2 = sensorData.EkfNav2 as EkfNav2;\n        pb.collection(\"EkfNav2\").create(\n          {\n            position_0: ekfNav2.position[0],\n            position_1: ekfNav2.position[1],\n            position_2: ekfNav2.position[2],\n            undulation: ekfNav2.undulation,\n            position_std_dev_0: ekfNav2.position_std_dev[0],\n            position_std_dev_1: ekfNav2.position_std_dev[1],\n            position_std_dev_2: ekfNav2.position_std_dev[2],\n            status: ekfNav2.status,\n          }, {\n          $autoCancel: false,\n        });\n\n      } else if (\"Imu1\" in sensorData) {\n        const imu1 = sensorData.Imu1 as Imu1;\n        pb.collection(\"Imu1\").create(\n          {\n            time_stamp: imu1.time_stamp,\n            status: imu1.status,\n            accelerometers_0: imu1.accelerometers[0],\n            accelerometers_1: imu1.accelerometers[1],\n            accelerometers_2: imu1.accelerometers[2],\n            gyroscopes_0: imu1.gyroscopes[0],\n            gyroscopes_1: imu1.gyroscopes[1],\n            gyroscopes_2: imu1.gyroscopes[2],\n          }, {\n          $autoCancel: false,\n        });\n\n      } else if (\"Imu2\" in sensorData) {\n        const imu2 = sensorData.Imu2 as Imu2;\n\n        pb.collection(\"Imu2\").create(\n          {\n            temperature: imu2.temperature,\n            delta_velocity_0: imu2.delta_velocity[0],\n            delta_velocity_1: imu2.delta_velocity[1],\n            delta_velocity_2: imu2.delta_velocity[2],\n            delta_angle_0: imu2.delta_angle[0],\n            delta_angle_1: imu2.delta_angle[1],\n            delta_angle_2: imu2.delta_angle[2],\n          }, {\n          $autoCancel: false,\n        });\n\n\n      } else if (\"GpsVel\" in sensorData) {\n        const gpsVel = sensorData.GpsVel as GpsVel;\n        //  export interface GpsVel { time_stamp: number, status: number, time_of_week: number, velocity: Array<number>, velocity_acc: Array<number>, course: number, course_acc: number, }\n        pb.collection(\"GpsVel\").create(\n          {\n            time_stamp: gpsVel.time_stamp,\n            status: gpsVel.status,\n            time_of_week: gpsVel.time_of_week,\n            velocity_0: gpsVel.velocity[0],\n            velocity_1: gpsVel.velocity[1],\n            velocity_2: gpsVel.velocity[2],\n            velocity_acc_0: gpsVel.velocity_acc[0],\n            velocity_acc_1: gpsVel.velocity_acc[1],\n            velocity_acc_2: gpsVel.velocity_acc[2],\n            course: gpsVel.course,\n            course_acc: gpsVel.course_acc,\n          }, {\n          $autoCancel: false,\n        });\n\n      }\n    } else if (\"log\" in rocketData) {\n      const dataLog = rocketData.log; // Log\n      pb.collection(\"Log\").create({\n        level: dataLog.level,\n        event: dataLog.event,\n      });\n    }\n  } else if (\"LinkStatus\" in obj) {\n    const linkStatus = obj.LinkStatus as LinkStatus;\n    pb.collection(\"LinkStatus\").create({\n      rssi: linkStatus.rssi,\n      remrssi: linkStatus.remrssi,\n      txbuf: linkStatus.txbuf,\n      noise: linkStatus.noise,\n      remnoise: linkStatus.remnoise,\n      rxerrors: linkStatus.rxerrors,\n      fixed: linkStatus.fixed,\n      recent_error_rate: linkStatus.recent_error_rate,\n      missed_messages: linkStatus.missed_messages,\n      connected: linkStatus.connected,\n    });\n  } else {\n    console.error(\"Unknown message type\", obj);\n  }\n}\n\nconsole.info(\"DB Service exited\");\n"],"mappings":"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","names":[]}